"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[7440],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),s=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(a),u=n,h=m["".concat(p,".").concat(u)]||m[u]||d[u]||i;return a?r.createElement(h,o(o({ref:t},c),{},{components:a})):r.createElement(h,o({ref:t},c))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:n,o[1]=l;for(var s=2;s<i;s++)o[s]=a[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},93018:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=a(87462),n=(a(67294),a(3905));const i={description:"Learn about wallet interoperability.",sidebar_position:6},o="Wallet interoperability",l={unversionedId:"concepts/wallet-interoperabilty",id:"concepts/wallet-interoperabilty",title:"Wallet interoperability",description:"Learn about wallet interoperability.",source:"@site/wallet/concepts/wallet-interoperabilty.md",sourceDirName:"concepts",slug:"/concepts/wallet-interoperabilty",permalink:"/1197-improve-eip-6963/wallet/concepts/wallet-interoperabilty",draft:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/wallet/concepts/wallet-interoperabilty.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{description:"Learn about wallet interoperability.",sidebar_position:6},sidebar:"walletSidebar",previous:{title:"Signing methods",permalink:"/1197-improve-eip-6963/wallet/concepts/signing-methods"},next:{title:"Smart contracts",permalink:"/1197-improve-eip-6963/wallet/concepts/smart-contracts"}},p={},s=[{value:"Third-party library support",id:"third-party-library-support",level:2},{value:"MIPD Store",id:"mipd-store",level:3},{value:"MetaMask SDK support",id:"metamask-sdk-support",level:2},{value:"Wallet support",id:"wallet-support",level:2},{value:"Backwards compatibility",id:"backwards-compatibility",level:2}],c={toc:s},m="wrapper";function d(e){let{components:t,...a}=e;return(0,n.kt)(m,(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"wallet-interoperability"},"Wallet interoperability"),(0,n.kt)("p",null,"A web dapp can integrate with multiple installed browser wallets simultaneously by adding support for\n",(0,n.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-6963"},"EIP-6963"),", which introduces an alternative wallet detection\nmechanism to the ",(0,n.kt)("a",{parentName:"p",href:"/1197-improve-eip-6963/wallet/concepts/wallet-api#ethereum-provider-api"},(0,n.kt)("inlineCode",{parentName:"a"},"window.ethereum"))," injected provider.\nThis mechanism is enabled by using the standardized events and interfaces defined by EIP-6963."),(0,n.kt)("p",null,"The following is a visual demo of the user experience, showing the data provided from each installed wallet:"),(0,n.kt)("p",{align:"center"},(0,n.kt)("video",{width:"100%",controls:!0},(0,n.kt)("source",{src:"/eip-6963.mp4"}))),(0,n.kt)("p",null,"You can ",(0,n.kt)("a",{parentName:"p",href:"/1197-improve-eip-6963/wallet/how-to/connect/"},"connect to MetaMask using EIP-6963")," and see the\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/MetaMask/vite-react-ts-eip-6963/tree/main"},"EIP-6963 Vite React + TypeScript demo"),"\nfor more information."),(0,n.kt)("h2",{id:"third-party-library-support"},"Third-party library support"),(0,n.kt)("p",null,"The following third-party libraries support EIP-6963:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://wagmi.sh"},"Wagmi 2+")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://docs.walletconnect.com/web3modal/about"},"Web3Modal 3+")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/wevm/mipd"},"MIPD Store")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.rainbowkit.com/"},"RainbowKit"))),(0,n.kt)("h3",{id:"mipd-store"},"MIPD Store"),(0,n.kt)("p",null,"The ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/wevm/mipd"},"MIPD Store")," stores the wallet providers and enables you to\nsubscribe to the store and retrieve the providers.\nUnlike ",(0,n.kt)("a",{parentName:"p",href:"https://wagmi.sh"},"Wagmi")," and ",(0,n.kt)("a",{parentName:"p",href:"https://onboard.blocknative.com/"},"Web3-Onboard"),", which are\nlibraries that provide components and connectors for multiple wallets and depend on MetaMask SDK for\nintegration, the MIPD Store is a utility library that makes it easier to work with EIP-6963 and\nsupports TypeScript types."),(0,n.kt)("h2",{id:"metamask-sdk-support"},"MetaMask SDK support"),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"MetaMask SDK does not support connecting to non-MetaMask wallets via EIP-6963.\nIf you intend to support discovery of other wallets, we recommend using other methods of adding\nEIP-6963 support such as ",(0,n.kt)("a",{parentName:"p",href:"https://wagmi.sh"},"Wagmi 2+"),".")),(0,n.kt)("p",null,"The ",(0,n.kt)("a",{parentName:"p",href:"/1197-improve-eip-6963/wallet/how-to/use-sdk/javascript/"},"MetaMask JavaScript SDK")," automatically checks\nfor the presence of the MetaMask extension via EIP-6963.\nThis eliminates the need for manual configuration or detection methods, simplifying the initial\nsetup process for both developers and users."),(0,n.kt)("p",null,"By adhering to the standards set by EIP-6963, the SDK unambiguously identifies and connects to\nMetaMask, resolving potential conflicts that might arise with other wallet extensions, ensuring a\nmore stable and reliable interaction for users."),(0,n.kt)("p",null,"The SDK is also being integrated into ",(0,n.kt)("a",{parentName:"p",href:"https://wagmi.sh/"},"Wagmi 2+"),", which supports EIP-6963.\nThe SDK on its own supports connecting ",(0,n.kt)("em",{parentName:"p"},"only")," to MetaMask via EIP-6963, so if you intend to support\ndiscovery of other wallets, we recommend using other methods of adding EIP-6963 support, such as\nWagmi 2+."),(0,n.kt)("h2",{id:"wallet-support"},"Wallet support"),(0,n.kt)("p",null,"The EIP-6963 alternative discovery mechanism works for wallets that have implemented support for EIP-6963.\nThis includes MetaMask, Coinbase, Trust Wallet, OKX, and other major wallets.\nSee the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/WalletConnect/EIP6963/blob/master/src/utils/constants.ts"},"list of wallets that support EIP-6963"),"."),(0,n.kt)("h2",{id:"backwards-compatibility"},"Backwards compatibility"),(0,n.kt)("p",null,"Dapps that do not support EIP-6963 can still\n",(0,n.kt)("a",{parentName:"p",href:"/1197-improve-eip-6963/wallet/how-to/connect/detect-metamask"},"detect MetaMask using the ",(0,n.kt)("inlineCode",{parentName:"a"},"window.ethereum")," provider"),".\nHowever, we recommend adding support to improve the user experience for multiple installed wallets.\nRead more about ",(0,n.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-6963#backwards-compatibility"},"EIP-6963 backwards compatibility"),"."))}d.isMDXComponent=!0}}]);