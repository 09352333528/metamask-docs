"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[9408],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},32531:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={description:"Use an alternative discovery mechanism for multiple wallets.",sidebar_position:11},o="Discover multiple wallets",s={unversionedId:"how-to/discover-multiple-wallets",id:"how-to/discover-multiple-wallets",title:"Discover multiple wallets",description:"Use an alternative discovery mechanism for multiple wallets.",source:"@site/wallet/how-to/discover-multiple-wallets.md",sourceDirName:"how-to",slug:"/how-to/discover-multiple-wallets",permalink:"/update-wallet-interop/wallet/how-to/discover-multiple-wallets",draft:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/wallet/how-to/discover-multiple-wallets.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{description:"Use an alternative discovery mechanism for multiple wallets.",sidebar_position:11},sidebar:"walletSidebar",previous:{title:"Access a user's MetaMask provider",permalink:"/update-wallet-interop/wallet/how-to/access-provider"},next:{title:"Onboard users",permalink:"/update-wallet-interop/wallet/how-to/onboard-users"}},l={},p=[{value:"What Developers Need to Know",id:"what-developers-need-to-know",level:2},{value:"The MetaMask SDK",id:"the-metamask-sdk",level:3},{value:"MetaMask SDK Automatic Detection",id:"metamask-sdk-automatic-detection",level:4}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"discover-multiple-wallets"},"Discover multiple wallets"),(0,r.kt)("p",null,"If a user has multiple wallet browser extensions installed, your web dapp can support\n",(0,r.kt)("a",{parentName:"p",href:"/update-wallet-interop/wallet/concepts/wallet-interoperabilty"},"wallet interoperability")," by adding support for\n",(0,r.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-6963"},"EIP-6963"),", which enables your dapp to discover and connect to multiple installed wallets."),(0,r.kt)("p",null,"To implement EIP-6963 in a React dapp, check out our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/MetaMask/vite-react-ts-eip-6963/blob/main/src/vite-env.d.ts"},"EIP-6963 ViteJS React + TypeScript Demo")),(0,r.kt)("h2",{id:"what-developers-need-to-know"},"What Developers Need to Know"),(0,r.kt)("p",null,"As a developer implementing ",(0,r.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-6963"},"EIP-6963"),", one simply needs to understand the initial motive, the value that this new approach brings users, and more importantly the types and interfaces needed in your application."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://eips.ethereum.org/EIPS/eip-6963#provider-info"},"Provider Info")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://eips.ethereum.org/EIPS/eip-6963#provider-detail"},"Provider Detail")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://eips.ethereum.org/EIPS/eip-6963#announce-and-request-events"},"Announce and Request Events"))),(0,r.kt)("p",null,"You will also need an interface to represent the ",(0,r.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-1193"},"EIP-1193 Provider")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"EIP1193Provider")," interface serves as the foundational structure for Ethereum wallet providers, outlining essential properties and methods for interaction with dapps. It includes attributes such as ",(0,r.kt)("inlineCode",{parentName:"p"},"isStatus"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"host"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"path"),", providing details about the provider's status and connection information. "),(0,r.kt)("p",null,"It also defines functions like ",(0,r.kt)("inlineCode",{parentName:"p"},"sendAsync"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"send"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"request")," for handling asynchronous communication and making requests to the Ethereum blockchain. This interface, defined by the previous ",(0,r.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-1193"},"EIP-1193"),", lays the groundwork for wallet interoperability and seamless integration with the Ethereum ecosystem. Developers can leverage this interface to implement and interact with Ethereum wallet providers in a standardized manner."),(0,r.kt)("h3",{id:"the-metamask-sdk"},"The MetaMask SDK"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"MetaMask SDK does not support connecting to non-MetaMask wallets via EIP-6963.\nIf you intend to support discovery of other wallets, we recommend using other methods of adding\nEIP-6963 support.")),(0,r.kt)("p",null,"The MetaMask SDK not only supports EIP-6963 on its own for detecting MetaMask, but is also being integrated into ",(0,r.kt)("a",{parentName:"p",href:"https://wagmi.sh/"},"WAGMI 2.0+")," which supports EIP-6963. If you only want to connect to MetaMask extension and MetaMask mobile:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/update-wallet-interop/wallet/how-to/connect/set-up-sdk/javascript/"},"Set up MetaMask SDK")," in your dapp.")),(0,r.kt)("p",null,"The SDKs integration of EIP-6963 is for the efficient discovery and connection with the MetaMask Extension only. This enhancement is pivotal in streamlining the user experience and promoting seamless interactions with the Ethereum blockchain. "),(0,r.kt)("h4",{id:"metamask-sdk-automatic-detection"},"MetaMask SDK Automatic Detection"),(0,r.kt)("p",null,"The MetaMask JS SDK now automatically checks for the presence of the MetaMask Extension that supports EIP-6963. This eliminates the need for manual configuration or detection methods, thereby simplifying the initial setup process for developers and users alike.  "),(0,r.kt)("p",null,"Conflict Resolution: By adhering to the standards set by EIP-6963, the SDK unambiguously identifies and connects to the MetaMask Extension. This approach effectively resolves potential conflicts that might arise with other wallet extensions, ensuring a more stable and reliable interaction for users."))}d.isMDXComponent=!0}}]);