"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[3381],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(a),m=i,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return a?n.createElement(h,o(o({ref:t},c),{},{components:a})):n.createElement(h,o({ref:t},c))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},63562:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var n=a(87462),i=(a(67294),a(3905));const r={description:"Integrate MetaMask SDK with Wagmi in your JavaScript dapp.",sidebar_position:2,sidebar_label:"Wagmi",tags:["JavaScript SDK"]},o="Use Wagmi with MetaMask SDK",s={unversionedId:"how-to/use-sdk/3rd-party-libraries/wagmi",id:"how-to/use-sdk/3rd-party-libraries/wagmi",title:"Use Wagmi with MetaMask SDK",description:"Integrate MetaMask SDK with Wagmi in your JavaScript dapp.",source:"@site/wallet/how-to/use-sdk/3rd-party-libraries/wagmi.md",sourceDirName:"how-to/use-sdk/3rd-party-libraries",slug:"/how-to/use-sdk/3rd-party-libraries/wagmi",permalink:"/1006-sdk-wagmi/wallet/how-to/use-sdk/3rd-party-libraries/wagmi",draft:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/wallet/how-to/use-sdk/3rd-party-libraries/wagmi.md",tags:[{label:"JavaScript SDK",permalink:"/1006-sdk-wagmi/wallet/tags/java-script-sdk"}],version:"current",sidebarPosition:2,frontMatter:{description:"Integrate MetaMask SDK with Wagmi in your JavaScript dapp.",sidebar_position:2,sidebar_label:"Wagmi",tags:["JavaScript SDK"]},sidebar:"walletSidebar",previous:{title:"Web3-Onboard",permalink:"/1006-sdk-wagmi/wallet/how-to/use-sdk/3rd-party-libraries/web3-onboard"},next:{title:"Detect wallet",permalink:"/1006-sdk-wagmi/wallet/how-to/detect-wallet"}},l={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Steps",id:"steps",level:2},{value:"1. Configure Wagmi with the SDK connector",id:"1-configure-wagmi-with-the-sdk-connector",level:3},{value:"2. Configure the SDK",id:"2-configure-the-sdk",level:3},{value:"Dapp metadata",id:"dapp-metadata",level:4},{value:"Universal links",id:"universal-links",level:4},{value:"3. Implement contract interaction using <code>usePrepareContractWrite</code>",id:"3-implement-contract-interaction-using-usepreparecontractwrite",level:3},{value:"4. Use the Infura API for read-only calls",id:"4-use-the-infura-api-for-read-only-calls",level:3}],c={toc:p},u="wrapper";function d(e){let{components:t,...r}=e;return(0,i.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"use-wagmi-with-metamask-sdk"},"Use Wagmi with MetaMask SDK"),(0,i.kt)("p",null,"Wagmi is a powerful and efficient library designed to streamline the development of dapps by\nsimplifying Ethereum interactions.\nThrough the MetaMask SDK integration with Wagmi, developers can offer users a seamless and secure\nway to integrate their MetaMask wallets with dapps, facilitating a wide range of blockchain operations."),(0,i.kt)("p",null,"This guide explains how to integrate MetaMask SDK into your dapp using Wagmi."),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("p",null,"Before proceeding with the integration, ensure you have a basic understanding of Ethereum smart\ncontracts and React Hooks.\nIt's also crucial to start with a Wagmi-based project.\nIf you haven't set up a Wagmi project yet, follow the getting-started guide to create one:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://wagmi.sh/react/getting-started"},"Getting Started with Wagmi")),(0,i.kt)("p",null,"This guide will provide you with all the necessary steps to set up a new Wagmi project, from\ninstallation to initial configuration, ensuring you have the right foundation to integrate MetaMask SDK."),(0,i.kt)("h2",{id:"steps"},"Steps"),(0,i.kt)("h3",{id:"1-configure-wagmi-with-the-sdk-connector"},"1. Configure Wagmi with the SDK connector"),(0,i.kt)("p",null,"The first step in integrating MetaMask with your dapp is to configure Wagmi to use the MetaMask connector.\nThis involves setting up the Wagmi configuration to include MetaMask as a connector and specifying\nthe Ethereum chains your application will support."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import { createConfig, http } from "wagmi";\nimport { mainnet, sepolia } from "wagmi/chains";\nimport { metaMask } from "wagmi/connectors";\n\nexport const config = createConfig({\n  chains: [mainnet, sepolia],\n  connectors: [\n    metaMask({\n      dappMetadata: {\n        name: "Your dapp name",\n      },\n    }),\n  ],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http(),\n  },\n});\n')),(0,i.kt)("h3",{id:"2-configure-the-sdk"},"2. Configure the SDK"),(0,i.kt)("h4",{id:"dapp-metadata"},"Dapp metadata"),(0,i.kt)("p",null,"It is crucial to provide ",(0,i.kt)("a",{parentName:"p",href:"/1006-sdk-wagmi/wallet/reference/sdk-js-options#dappmetadata"},(0,i.kt)("inlineCode",{parentName:"a"},"dappMetadata"))," when\nconfiguring your connector, as it is now a mandatory requirement for integration.\nThis metadata helps in identifying your dapp within the MetaMask ecosystem."),(0,i.kt)("h4",{id:"universal-links"},"Universal links"),(0,i.kt)("p",null,"To avoid issues with deep links on iOS, use universal links in your dapp.\nThis ensures a smoother transition for users accessing your dapp from mobile devices, providing a\nbetter user experience compared to traditional deep linking methods."),(0,i.kt)("p",null,"So we don't recommend setting the MetaMaskSDK\n",(0,i.kt)("a",{parentName:"p",href:"/1006-sdk-wagmi/wallet/reference/sdk-js-options#usedeeplink"},(0,i.kt)("inlineCode",{parentName:"a"},"useDeeplink"))," option to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("h3",{id:"3-implement-contract-interaction-using-usepreparecontractwrite"},"3. Implement contract interaction using ",(0,i.kt)("inlineCode",{parentName:"h3"},"usePrepareContractWrite")),(0,i.kt)("p",null,"Due to a known issue in Safari where a 500ms timeout can interrupt smart contract interactions, it\nis recommended to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"usePrepareContractWrite")," hook from Wagmi.\nThis approach ensures smooth transactions by preparing the contract write operation ahead of the actual execution."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import { usePrepareContractWrite, useContractWrite } from "wagmi";\n\nconst { config } = usePrepareContractWrite({\n  address: "0xContractAddress",\n  abi: contractABI,\n  functionName: "functionToCall",\n  args: [arg1, arg2],\n});\n\nconst { write } = useContractWrite(config);\n\nwrite();\n')),(0,i.kt)("h3",{id:"4-use-the-infura-api-for-read-only-calls"},"4. Use the Infura API for read-only calls"),(0,i.kt)("p",null,"For read-only blockchain calls, it's best practice to use the Infura API.\nThis approach offloads the read operations to Infura's nodes, reducing the load on your own\ninfrastructure and ensuring high availability and reliability."),(0,i.kt)("p",null,"Wagmi is not optimized for mobile environments.\nThis limitation becomes evident when dealing with read-only calls, which are queries that fetch data\nfrom the blockchain without making a transaction.\nSince mobile apps may not maintain a continuous connection to MetaMask, these read-only calls can\nfail, leading to a suboptimal user experience."),(0,i.kt)("p",null,"These are the errors that might occur after a while in mobile environments when using Wagmi in your\ndapp without an Infura API key:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Wagmi errors",src:a(80933).Z,width:"1136",height:"340"})),(0,i.kt)("p",null,"An Infura API key is crucial because it provides a direct and reliable connection to the Ethereum\nnetwork, independent of the user's wallet connection.\nThis is particularly beneficial for mobile apps that rely on Wagmi, which is not inherently designed\nfor mobile's variable connectivity and background processing constraints."),(0,i.kt)("p",null,"By including an Infura API key in the MetaMask SDK props, developers ensure:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Uninterrupted Access:")," Continuous network access for read-only calls, regardless of MetaMask's state.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Enhanced Stability:")," Stabilized app functionality by relying on Infura's robust infrastructure\nrather than mobile's fluctuating network conditions."))),(0,i.kt)("p",null,"In essence, an Infura API key compensates for Wagmi's lack of mobile optimization by providing a\nstable network backend for read-only operations."),(0,i.kt)("p",null,"Visit ",(0,i.kt)("a",{parentName:"p",href:"https://www.infura.io/"},"Infura.io")," to get an API key."))}d.isMDXComponent=!0},80933:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/wagmi-errors-a2d119e19bfdb281e9ffe8513b6e823b.png"}}]);