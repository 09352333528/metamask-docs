"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[2579],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>y});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,y=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(y,c(c({ref:t},l),{},{components:n})):r.createElement(y,c({ref:t},l))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,c=new Array(i);c[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:a,c[1]=o;for(var p=2;p<i;p++)c[p]=n[p];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},79433:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={sidebar_position:2,toc_max_heading_level:2,sidebar_label:"Events"},c="Keyring Client API events",o={unversionedId:"reference/keyring-api/client-api/events",id:"reference/keyring-api/client-api/events",title:"Keyring Client API events",description:"Account management Snaps can notify MetaMask of the",source:"@site/snaps/reference/keyring-api/client-api/events.md",sourceDirName:"reference/keyring-api/client-api",slug:"/reference/keyring-api/client-api/events",permalink:"/1165-keyring-reference/snaps/reference/keyring-api/client-api/events",draft:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/snaps/reference/keyring-api/client-api/events.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,toc_max_heading_level:2,sidebar_label:"Events"},sidebar:"snapsSidebar",previous:{title:"Objects",permalink:"/1165-keyring-reference/snaps/reference/keyring-api/client-api/objects"},next:{title:"Keyring Interface API",permalink:"/1165-keyring-reference/snaps/reference/keyring-api/interface-api"}},s={},p=[{value:"<code>AccountCreated</code>",id:"accountcreated",level:2},{value:"Example",id:"example",level:3},{value:"<code>AccountUpdated</code>",id:"accountupdated",level:2},{value:"Example",id:"example-1",level:3},{value:"<code>AccountDeleted</code>",id:"accountdeleted",level:2},{value:"Example",id:"example-2",level:3},{value:"<code>RequestApproved</code>",id:"requestapproved",level:2},{value:"Example",id:"example-3",level:3},{value:"<code>RequestRejected</code>",id:"requestrejected",level:2},{value:"Example",id:"example-4",level:3}],l={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"keyring-client-api-events"},"Keyring Client API events"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/1165-keyring-reference/snaps/features/custom-evm-accounts/"},"Account management Snaps")," can notify MetaMask of the\nfollowing ",(0,a.kt)("a",{parentName:"p",href:"/1165-keyring-reference/snaps/reference/keyring-api/client-api/"},"Keyring Client API")," events."),(0,a.kt)("h2",{id:"accountcreated"},(0,a.kt)("inlineCode",{parentName:"h2"},"AccountCreated")),(0,a.kt)("p",null,"An account is created.\nMetaMask returns an error if the account already exists or the account object is invalid."),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"try {\n    emitSnapKeyringEvent(snap, KeyringEvent.AccountCreated, { account });\n    // Update your Snap's state...\n} catch (error) {\n    // Handle the error...\n}\n")),(0,a.kt)("h2",{id:"accountupdated"},(0,a.kt)("inlineCode",{parentName:"h2"},"AccountUpdated")),(0,a.kt)("p",null,"An account is updated.\nMetaMask returns an error if one of the following is true:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The account does not exist."),(0,a.kt)("li",{parentName:"ul"},"The account object is invalid."),(0,a.kt)("li",{parentName:"ul"},"The account address is updated.")),(0,a.kt)("h3",{id:"example-1"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"try {\n    emitSnapKeyringEvent(snap, KeyringEvent.AccountUpdated, { account });\n    // Update your Snap's state...\n} catch (error) {\n    // Handle the error...\n}\n")),(0,a.kt)("h2",{id:"accountdeleted"},(0,a.kt)("inlineCode",{parentName:"h2"},"AccountDeleted")),(0,a.kt)("p",null,"An account is deleted.\nThe delete event is idempotent, so it is safe to emit even if the account does not exist."),(0,a.kt)("h3",{id:"example-2"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"try {\n    emitSnapKeyringEvent(snap, KeyringEvent.AccountDeleted, {\n        id: account.id,\n    });\n    // Update your Snap's state...\n} catch (error) {\n    // Handle the error...\n}\n")),(0,a.kt)("h2",{id:"requestapproved"},(0,a.kt)("inlineCode",{parentName:"h2"},"RequestApproved")),(0,a.kt)("p",null,"A request is approved.\nMetaMask returns an error if the request does not exist.\nThis event only applies to Snaps that\n",(0,a.kt)("a",{parentName:"p",href:"/1165-keyring-reference/snaps/features/custom-evm-accounts/#asynchronous-transaction-flow"},"handle requests asynchronously"),"."),(0,a.kt)("h3",{id:"example-3"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"try {\n    emitSnapKeyringEvent(snap, KeyringEvent.RequestApproved, {\n        id: request.id,\n        result,\n    });\n    // Update your Snap's state...\n} catch (error) {\n    // Handle the error...\n}\n")),(0,a.kt)("h2",{id:"requestrejected"},(0,a.kt)("inlineCode",{parentName:"h2"},"RequestRejected")),(0,a.kt)("p",null,"A request is rejected.\nMetaMask returns an error if the request does not exist.\nThis event only applies to Snaps that\n",(0,a.kt)("a",{parentName:"p",href:"/1165-keyring-reference/snaps/features/custom-evm-accounts/#asynchronous-transaction-flow"},"handle requests asynchronously"),"."),(0,a.kt)("h3",{id:"example-4"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"try {\n    emitSnapKeyringEvent(snap, KeyringEvent.RequestRejected, {\n        id: request.id,\n    });\n    // Update your Snap's state...\n} catch (error) {\n    // Handle the error...\n}\n")))}d.isMDXComponent=!0}}]);