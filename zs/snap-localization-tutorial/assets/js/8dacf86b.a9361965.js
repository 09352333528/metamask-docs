"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[1976],{3905:(e,n,a)=>{a.d(n,{Zo:()=>c,kt:()=>f});var t=a(67294);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var r=t.createContext({}),p=function(e){var n=t.useContext(r),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},c=function(e){var n=p(e.components);return t.createElement(r.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,l=e.originalType,r=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(a),m=o,f=u["".concat(r,".").concat(m)]||u[m]||d[m]||l;return a?t.createElement(f,s(s({ref:n},c),{},{components:a})):t.createElement(f,s({ref:n},c))}));function f(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=a.length,s=new Array(l);s[0]=m;var i={};for(var r in n)hasOwnProperty.call(n,r)&&(i[r]=n[r]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var p=2;p<l;p++)s[p]=a[p];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},51880:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var t=a(87462),o=(a(67294),a(3905));const l={description:"Display your Snap's UI and metadata in your users' language.",sidebar_position:3},s="Localize a Snap",i={unversionedId:"tutorials/localize-a-snap",id:"tutorials/localize-a-snap",title:"Localize a Snap",description:"Display your Snap's UI and metadata in your users' language.",source:"@site/snaps/tutorials/localize-a-snap.md",sourceDirName:"tutorials",slug:"/tutorials/localize-a-snap",permalink:"/zs/snap-localization-tutorial/snaps/tutorials/localize-a-snap",draft:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/snaps/tutorials/localize-a-snap.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{description:"Display your Snap's UI and metadata in your users' language.",sidebar_position:3},sidebar:"snapsSidebar",previous:{title:"Create a Snap to calculate gas fee percentages",permalink:"/zs/snap-localization-tutorial/snaps/tutorials/transaction-insights"},next:{title:"Reference",permalink:"/zs/snap-localization-tutorial/snaps/reference"}},r={},p=[{value:"Localize the Snap UI",id:"localize-the-snap-ui",level:2},{value:"Localize the Snap&#39;s manifest",id:"localize-the-snaps-manifest",level:2}],c={toc:p},u="wrapper";function d(e){let{components:n,...a}=e;return(0,o.kt)(u,(0,t.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"localize-a-snap"},"Localize a Snap"),(0,o.kt)("p",null,"This tutorial walks you through localizing your Snap. This is done in two places:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"in your Snaps's code, by building upon the ",(0,o.kt)("a",{parentName:"li",href:"/zs/snap-localization-tutorial/snaps/reference/rpc-api#snap_getlocale"},(0,o.kt)("inlineCode",{parentName:"a"},"snap_getLocale"))," function"),(0,o.kt)("li",{parentName:"ul"},"in the manifest, where fields like title and description can be shown in the user's language")),(0,o.kt)("h2",{id:"localize-the-snap-ui"},"Localize the Snap UI"),(0,o.kt)("p",null,"In your Snap code, you can determine the user's language by using the ",(0,o.kt)("a",{parentName:"p",href:"/zs/snap-localization-tutorial/snaps/reference/rpc-api#snap_getlocale"},(0,o.kt)("inlineCode",{parentName:"a"},"snap_getLocale"))," function. To call the ",(0,o.kt)("inlineCode",{parentName:"p"},"snap_getLocale")," function in your Snap code, first request the required permission by adding it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"initialPermissions")," field in your ",(0,o.kt)("inlineCode",{parentName:"p"},"snap.manifest.json")," file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "version": "1.1.0",\n  //...\n  "initialPermissions": {\n    // ...\n    "snap_getLocale": {}\n  }\n}\n')),(0,o.kt)("p",null,"With this permission granted, your Snap code can now call ",(0,o.kt)("inlineCode",{parentName:"p"},"snap_getLocale"),". This will return a language code like ",(0,o.kt)("inlineCode",{parentName:"p"},'"en"'),", ",(0,o.kt)("inlineCode",{parentName:"p"},'"es"'),", ... It's then up to you to determine how to use this code to customize your Snap's UI."),(0,o.kt)("p",null,"As an example, you can create files of the form ",(0,o.kt)("inlineCode",{parentName:"p"},"snap/locales/[language_code].json")," like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "locale": "en",\n  "messages": {\n    "hello": {\n      "message": "Hello, world!",\n      "description": "The message that is returned when the `hello` method is called."\n    }\n  }\n}\n')),(0,o.kt)("p",null,"These files can be used from a localization module. Here's an example of a working one:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import da from '../locales/da.json';\nimport en from '../locales/en.json';\nimport nl from '../locales/nl.json';\n\n// Fallback language, to be used if we don't have a valid translation in\n// the requested locale.\nconst FALLBACK_LANGUAGE: Locale = 'en';\n\nexport const locales = {\n  da: da.messages,\n  en: en.messages,\n  nl: nl.messages,\n};\n\nexport type Locale = keyof typeof locales;\n\nexport async function getMessage(id: keyof (typeof locales)[Locale]) {\n  const locale = (await snap.request({ method: 'snap_getLocale' })) as Locale;\n  const { message } = locales[locale]?.[id] ?? locales[FALLBACK_LANGUAGE][id];\n\n  return message;\n}\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"getMessage")," function can then be used anywhere in your Snap code to localize a message, falling back to english if the user's locale wasn't found."),(0,o.kt)("p",null,"Here's an example of usage in a Snap's RPC request handler:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { rpcErrors } from '@metamask/rpc-errors';\nimport type { OnRpcRequestHandler } from '@metamask/snaps-sdk';\n\nimport { getMessage } from './locales';\n\nexport const onRpcRequest: OnRpcRequestHandler = async ({ request }) => {\n  switch (request.method) {\n    case 'hello':\n      return await getMessage('hello');\n\n    default:\n      throw rpcErrors.methodNotFound({\n        data: { method: request.method },\n      });\n  }\n};\n")),(0,o.kt)("h2",{id:"localize-the-snaps-manifest"},"Localize the Snap's manifest"),(0,o.kt)("p",null,"In addition to containing purely technical metadata like ",(0,o.kt)("inlineCode",{parentName:"p"},"version")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"shasum"),", the Snap manifest also contains textual data such as ",(0,o.kt)("inlineCode",{parentName:"p"},"proposedName")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"description"),". These manifest fields can be localized as well."),(0,o.kt)("p",null,"Here's an example of a localized manifest file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "version": "1.1.1",\n  "description": "{{ description }}",\n  "proposedName": "{{ name }}",\n  // ...\n  "source": {\n    "shasum": "XXX",\n    // ...\n    "locales": [\n      // ...\n      "locales/da.json",\n      "locales/en.json",\n      "locales/nl.json"\n    ]\n  },\n  "initialPermissions": {\n    // ...\n    "snap_getLocale": {}\n  },\n  "manifestVersion": "0.1"\n}\n')),(0,o.kt)("p",null,"The first step is adding all available locales to the ",(0,o.kt)("inlineCode",{parentName:"p"},"source.locales")," section. This will point to the files we created in the previous section. The example locale file we provided above is exactly in the format that MetaMask needs to localize the manifest."),(0,o.kt)("p",null,"Then, for any field that needs to be localized, simply replace the text of the field with ",(0,o.kt)("inlineCode",{parentName:"p"},"{{ fieldName }}"),"."),(0,o.kt)("p",null,"MetaMask will look for an appropriate locale from the files you provided, and replace the template string with its translation in the UI. If the user's locale is not found, it will fallback to ",(0,o.kt)("inlineCode",{parentName:"p"},'"en"'),"."))}d.isMDXComponent=!0}}]);