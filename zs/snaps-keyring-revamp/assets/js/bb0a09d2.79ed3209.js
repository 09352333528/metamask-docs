"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[3899],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),o=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=o(e.components);return r.createElement(p.Provider,{value:t},e.children)},l="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),l=o(n),y=a,h=l["".concat(p,".").concat(y)]||l[y]||g[y]||i;return n?r.createElement(h,s(s({ref:t},u),{},{components:n})):r.createElement(h,s({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=y;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c[l]="string"==typeof e?e:a,s[1]=c;for(var o=2;o<i;o++)s[o]=n[o];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},60527:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>g,frontMatter:()=>i,metadata:()=>c,toc:()=>o});var r=n(87462),a=(n(67294),n(3905));const i={},s="Variable: KeyringAccountStruct",c={unversionedId:"reference/keyring-api/variables/KeyringAccountStruct",id:"reference/keyring-api/variables/KeyringAccountStruct",title:"Variable: KeyringAccountStruct",description:"Source",source:"@site/snaps/reference/keyring-api/variables/KeyringAccountStruct.md",sourceDirName:"reference/keyring-api/variables",slug:"/reference/keyring-api/variables/KeyringAccountStruct",permalink:"/zs/snaps-keyring-revamp/snaps/reference/keyring-api/variables/KeyringAccountStruct",draft:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/snaps/reference/keyring-api/variables/KeyringAccountStruct.md",tags:[],version:"current",frontMatter:{},sidebar:"snapsSidebar",previous:{title:"Variable: KeyringAccountDataStruct",permalink:"/zs/snaps-keyring-revamp/snaps/reference/keyring-api/variables/KeyringAccountDataStruct"},next:{title:"Variable: KeyringRequestStruct",permalink:"/zs/snaps-keyring-revamp/snaps/reference/keyring-api/variables/KeyringRequestStruct"}},p={},o=[{value:"Source",id:"source",level:2}],u={toc:o},l="wrapper";function g(e){let{components:t,...n}=e;return(0,a.kt)(l,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"variable-keyringaccountstruct"},"Variable: KeyringAccountStruct"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const KeyringAccountStruct: Struct<{\n  address: string;\n  id: string;\n  methods: (\n     | "personal_sign"\n     | "eth_sign"\n     | "eth_signTransaction"\n     | "eth_signTypedData_v1"\n     | "eth_signTypedData_v3"\n     | "eth_signTypedData_v4"\n     | "eth_prepareUserOperation"\n     | "eth_patchUserOperation"\n     | "eth_signUserOperation")[];\n  options: Record<string, Json>;\n  type: "eip155:eoa" | "eip155:erc4337";\n  }, {\n  address: Struct<string, null>;\n  id: Struct<string, null>;\n  methods: Struct<(\n     | "personal_sign"\n     | "eth_sign"\n     | "eth_signTransaction"\n     | "eth_signTypedData_v1"\n     | "eth_signTypedData_v3"\n     | "eth_signTypedData_v4"\n     | "eth_prepareUserOperation"\n     | "eth_patchUserOperation"\n     | "eth_signUserOperation")[], Struct<\n     | "personal_sign"\n     | "eth_sign"\n     | "eth_signTransaction"\n     | "eth_signTypedData_v1"\n     | "eth_signTypedData_v3"\n     | "eth_signTypedData_v4"\n     | "eth_prepareUserOperation"\n     | "eth_patchUserOperation"\n     | "eth_signUserOperation", {\n     eth_patchUserOperation: "eth_patchUserOperation";\n     eth_prepareUserOperation: "eth_prepareUserOperation";\n     eth_sign: "eth_sign";\n     eth_signTransaction: "eth_signTransaction";\n     eth_signTypedData_v1: "eth_signTypedData_v1";\n     eth_signTypedData_v3: "eth_signTypedData_v3";\n     eth_signTypedData_v4: "eth_signTypedData_v4";\n     eth_signUserOperation: "eth_signUserOperation";\n     personal_sign: "personal_sign";\n  }>>;\n  options: Struct<Record<string, Json>, null>;\n  type: Struct<"eip155:eoa" | "eip155:erc4337", {\n     eip155:eoa: "eip155:eoa";\n     eip155:erc4337: "eip155:erc4337";\n  }>;\n  }>;\n')),(0,a.kt)("h2",{id:"source"},"Source"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/MetaMask/keyring-api/blob/a868ea2/src/api.ts#L34"},"external/keyring-api/src/api.ts:34")))}g.isMDXComponent=!0}}]);