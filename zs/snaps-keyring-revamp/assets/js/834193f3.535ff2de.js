"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[5783],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),l=c(n),g=a,h=l["".concat(p,".").concat(g)]||l[g]||d[g]||i;return n?r.createElement(h,s(s({ref:t},u),{},{components:n})):r.createElement(h,s({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=g;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[l]="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},64157:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const i={},s="Variable: AccountCreatedEventStruct",o={unversionedId:"reference/keyring-api/variables/AccountCreatedEventStruct",id:"reference/keyring-api/variables/AccountCreatedEventStruct",title:"Variable: AccountCreatedEventStruct",description:"Source",source:"@site/snaps/reference/keyring-api/variables/AccountCreatedEventStruct.md",sourceDirName:"reference/keyring-api/variables",slug:"/reference/keyring-api/variables/AccountCreatedEventStruct",permalink:"/zs/snaps-keyring-revamp/snaps/reference/keyring-api/variables/AccountCreatedEventStruct",draft:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/snaps/reference/keyring-api/variables/AccountCreatedEventStruct.md",tags:[],version:"current",frontMatter:{},sidebar:"snapsSidebar",previous:{title:"Type alias: UpdateAccountResponse",permalink:"/zs/snaps-keyring-revamp/snaps/reference/keyring-api/type-aliases/UpdateAccountResponse"},next:{title:"Variable: AccountDeletedEventStruct",permalink:"/zs/snaps-keyring-revamp/snaps/reference/keyring-api/variables/AccountDeletedEventStruct"}},p={},c=[{value:"Source",id:"source",level:2}],u={toc:c},l="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(l,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"variable-accountcreatedeventstruct"},"Variable: AccountCreatedEventStruct"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const AccountCreatedEventStruct: Struct<{\n  method: "notify:accountCreated";\n  params: { account: { type: "eip155:eoa" | "eip155:erc4337"; id: string; address: string; options: Record<string, Json>; methods: ("personal_sign" | "eth_sign" | "eth_signTransaction" | "eth_signTypedData_v1" | "eth_signTypedData_v3" | "eth_signTypedData_v4" | "eth_prepareUserOperation" | "eth_patchUserOperation" | "eth_signUserOperation")[]; }; };\n  }, {\n  method: Struct<"notify:accountCreated", "notify:accountCreated">;\n  params: Struct<{\n     account: { type: "eip155:eoa" | "eip155:erc4337"; id: string; address: string; options: Record<string, Json>; methods: ("personal_sign" | "eth_sign" | "eth_signTransaction" | "eth_signTypedData_v1" | "eth_signTypedData_v3" | "eth_signTypedData_v4" | "eth_prepareUserOperation" | "eth_patchUserOperation" | "eth_signUserOperation")[]; };\n     }, {\n     account: Struct<{\n        address: string;\n        id: string;\n        methods: (\n           | "personal_sign"\n           | "eth_sign"\n           | "eth_signTransaction"\n           | "eth_signTypedData_v1"\n           | "eth_signTypedData_v3"\n           | "eth_signTypedData_v4"\n           | "eth_prepareUserOperation"\n           | "eth_patchUserOperation"\n           | "eth_signUserOperation")[];\n        options: Record<string, Json>;\n        type: "eip155:eoa" | "eip155:erc4337";\n        }, {\n        address: Struct<string, null>;\n        id: Struct<string, null>;\n        methods: Struct<(\n           | "personal_sign"\n           | "eth_sign"\n           | "eth_signTransaction"\n           | "eth_signTypedData_v1"\n           | "eth_signTypedData_v3"\n           | "eth_signTypedData_v4"\n           | "eth_prepareUserOperation"\n           | "eth_patchUserOperation"\n           | "eth_signUserOperation")[], Struct<\n           | "personal_sign"\n           | "eth_sign"\n           | "eth_signTransaction"\n           | "eth_signTypedData_v1"\n           | "eth_signTypedData_v3"\n           | "eth_signTypedData_v4"\n           | "eth_prepareUserOperation"\n           | "eth_patchUserOperation"\n           | "eth_signUserOperation", {\n           eth_patchUserOperation: "eth_patchUserOperation";\n           eth_prepareUserOperation: "eth_prepareUserOperation";\n           eth_sign: "eth_sign";\n           eth_signTransaction: "eth_signTransaction";\n           eth_signTypedData_v1: "eth_signTypedData_v1";\n           eth_signTypedData_v3: "eth_signTypedData_v3";\n           eth_signTypedData_v4: "eth_signTypedData_v4";\n           eth_signUserOperation: "eth_signUserOperation";\n           personal_sign: "personal_sign";\n        }>>;\n        options: Struct<Record<string, Json>, null>;\n        type: Struct<"eip155:eoa" | "eip155:erc4337", {\n           eip155:eoa: "eip155:eoa";\n           eip155:erc4337: "eip155:erc4337";\n        }>;\n     }>;\n  }>;\n  }>;\n')),(0,a.kt)("h2",{id:"source"},"Source"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/MetaMask/keyring-api/blob/a868ea2/src/internal/events.ts#L8"},"external/keyring-api/src/internal/events.ts:8")))}d.isMDXComponent=!0}}]);