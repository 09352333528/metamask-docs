"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[5216],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,h=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},53416:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>p,toc:()=>m});var a=n(87462),r=(n(67294),n(3905)),i=n(65488),l=n(85162);const o={description:"See the Snaps API reference.",sidebar_position:1,toc_max_heading_level:2},s="Snaps API",p={unversionedId:"reference/snaps-api",id:"reference/snaps-api",title:"Snaps API",description:"See the Snaps API reference.",source:"@site/snaps/reference/snaps-api.md",sourceDirName:"reference",slug:"/reference/snaps-api",permalink:"/1089-get-started-revamp/snaps/reference/snaps-api",draft:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/snaps/reference/snaps-api.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{description:"See the Snaps API reference.",sidebar_position:1,toc_max_heading_level:2},sidebar:"snapsSidebar",previous:{title:"Reference",permalink:"/1089-get-started-revamp/snaps/reference"},next:{title:"Snaps exports",permalink:"/1089-get-started-revamp/snaps/reference/exports"}},u={},m=[{value:"snap_dialog",id:"snap_dialog",level:2},{value:"Alert dialog",id:"alert-dialog",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Example",id:"example",level:4},{value:"Confirmation dialog",id:"confirmation-dialog",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns",level:4},{value:"Example",id:"example-1",level:4},{value:"Prompt dialog",id:"prompt-dialog",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Example",id:"example-2",level:4},{value:"snap_getBip32Entropy",id:"snap_getbip32entropy",level:2},{value:"Parameters",id:"parameters-3",level:3},{value:"Returns",id:"returns-2",level:3},{value:"Example",id:"example-3",level:3},{value:"snap_getBip32PublicKey",id:"snap_getbip32publickey",level:2},{value:"Parameters",id:"parameters-4",level:3},{value:"Returns",id:"returns-3",level:3},{value:"Example",id:"example-4",level:3},{value:"snap_getBip44Entropy",id:"snap_getbip44entropy",level:2},{value:"Parameters",id:"parameters-5",level:3},{value:"Returns",id:"returns-4",level:3},{value:"Example",id:"example-5",level:3},{value:"snap_getEntropy",id:"snap_getentropy",level:2},{value:"Parameters",id:"parameters-6",level:3},{value:"Returns",id:"returns-5",level:3},{value:"Example",id:"example-6",level:3},{value:"snap_getLocale",id:"snap_getlocale",level:2},{value:"Returns",id:"returns-6",level:3},{value:"Example",id:"example-7",level:3},{value:"snap_manageAccounts",id:"snap_manageaccounts",level:2},{value:"createAccount",id:"createaccount",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Example",id:"example-8",level:4},{value:"updateAccount",id:"updateaccount",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Example",id:"example-9",level:4},{value:"deleteAccount",id:"deleteaccount",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Example",id:"example-10",level:4},{value:"listAccounts",id:"listaccounts",level:3},{value:"Returns",id:"returns-10",level:4},{value:"Example",id:"example-11",level:4},{value:"submitResponse",id:"submitresponse",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Example",id:"example-12",level:4},{value:"snap_manageState",id:"snap_managestate",level:2},{value:"Parameters",id:"parameters-11",level:3},{value:"Returns",id:"returns-12",level:3},{value:"Example",id:"example-13",level:3},{value:"snap_notify",id:"snap_notify",level:2},{value:"Parameters",id:"parameters-12",level:3},{value:"Example",id:"example-14",level:3}],c={toc:m},d="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"snaps-api"},"Snaps API"),(0,r.kt)("p",null,"Snaps can communicate with and modify the functionality of MetaMask using the ",(0,r.kt)("a",{parentName:"p",href:"/1089-get-started-revamp/snaps/concepts/apis#snaps-api"},"Snaps API"),".\nTo call each method, you must first ",(0,r.kt)("a",{parentName:"p",href:"/1089-get-started-revamp/snaps/how-to/request-permissions"},"request permission")," in the Snap\nmanifest file."),(0,r.kt)("h2",{id:"snap_dialog"},"snap_dialog"),(0,r.kt)("p",null,"Displays a dialog in the MetaMask UI.\nThere are three types of dialogs with different parameters and return types: ",(0,r.kt)("a",{parentName:"p",href:"#alert-dialog"},"alert"),",\n",(0,r.kt)("a",{parentName:"p",href:"#confirmation-dialog"},"confirmation"),", and ",(0,r.kt)("a",{parentName:"p",href:"#prompt-dialog"},"prompt"),"."),(0,r.kt)("h3",{id:"alert-dialog"},"Alert dialog"),(0,r.kt)("p",null,"Displays an alert that can only be acknowledged."),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("p",null,"An object containing the contents of the alert dialog:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type")," - The type of dialog (",(0,r.kt)("inlineCode",{parentName:"li"},"'Alert'"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"content")," - The content of the alert, as a ",(0,r.kt)("a",{parentName:"li",href:"/1089-get-started-revamp/snaps/how-to/use-custom-ui"},"custom UI")," component.")),(0,r.kt)("h4",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { panel, text, heading } from '@metamask/snaps-ui';\n\nawait snap.request({\n  method: 'snap_dialog',\n  params: {\n    type: 'Alert',\n    content: panel([\n      heading('Something happened in the system'),\n      text('The thing that happened is...'),\n    ]),\n  },\n});\n\n// Code that should execute after the alert has been acknowledged\n")),(0,r.kt)("h3",{id:"confirmation-dialog"},"Confirmation dialog"),(0,r.kt)("p",null,"Displays a confirmation that can be accepted or rejected."),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("p",null,"An object containing the contents of the confirmation dialog:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type")," - The type of dialog (",(0,r.kt)("inlineCode",{parentName:"li"},"'Confirmation'"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"content")," - The content of the confirmation, as a ",(0,r.kt)("a",{parentName:"li",href:"/1089-get-started-revamp/snaps/how-to/use-custom-ui"},"custom UI")," component.")),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"true")," if the confirmation was accepted, ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,r.kt)("h4",{id:"example-1"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { panel, text, heading } from '@metamask/snaps-ui';\n\nconst result = await snap.request({\n  method: 'snap_dialog',\n  params: {\n    type: 'Confirmation',\n    content: panel([\n      heading('Would you like to take the action?'),\n      text('The action is...'),\n    ]),\n  },\n});\n\nif (result === true) {\n  // Do the action\n}\n")),(0,r.kt)("h3",{id:"prompt-dialog"},"Prompt dialog"),(0,r.kt)("p",null,"Displays a prompt where the user can enter a text response."),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("p",null,"An object containing the contents of the prompt dialog:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type")," - The type of dialog (",(0,r.kt)("inlineCode",{parentName:"li"},"'Prompt'"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"content")," - The content of the prompt, as a ",(0,r.kt)("a",{parentName:"li",href:"/1089-get-started-revamp/snaps/how-to/use-custom-ui"},"custom UI")," component."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"placeholder")," - Text that will be in the input field when nothing is typed.")),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,"The text entered by the user if the prompt was submitted or ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," if the prompt was rejected or closed. If the user does not enter any text and submits the prompt, the value is an empty string."),(0,r.kt)("h4",{id:"example-2"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { panel, text, heading } from '@metamask/snaps-ui';\n\nconst walletAddress = await snap.request({\n  method: 'snap_dialog',\n  params: {\n    type: 'Prompt',\n    content: panel([\n      heading('What is the wallet address?'),\n      text('Please enter the wallet address to be monitored'),\n    ]),\n    placeholder: '0x123...',\n  },\n});\n\n// `walletAddress` will be a string containing the address entered by the user\n")),(0,r.kt)("h2",{id:"snap_getbip32entropy"},"snap_getBip32Entropy"),(0,r.kt)("admonition",{title:"important",type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"If you call this method, you receive the user's parent key for the derivation path they request.\nYou're managing the user's keys and assets on their behalf.\nTheir safety is your responsibility.")),(0,r.kt)("p",null,"Gets the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/satoshilabs/slips/blob/master/slip-0010.md"},"SLIP-10")," key for the ",(0,r.kt)("inlineCode",{parentName:"p"},"path"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"curve")," specified by the method name."),(0,r.kt)("p",null,"This method is designed to be used with the\n",(0,r.kt)("a",{parentName:"p",href:"https://npmjs.com/package/@metamask/key-tree"},(0,r.kt)("inlineCode",{parentName:"a"},"@metamask/key-tree"))," module.\n",(0,r.kt)("inlineCode",{parentName:"p"},"@metamask/key-tree")," can help you get the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#extended-keys"},"extended private keys"),"\nfor user addresses, but it's your responsibility to know how to use those keys to, for example,\nderive an address for the relevant protocol or sign a transaction for the user."),(0,r.kt)("h3",{id:"parameters-3"},"Parameters"),(0,r.kt)("p",null,"An object containing:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path")," - An array, starting with ",(0,r.kt)("inlineCode",{parentName:"li"},"m"),", containing the BIP-32 derivation path to the key to\nretrieve.\nFor example, ",(0,r.kt)("inlineCode",{parentName:"li"},'["m", "44\'", "60\'"]'),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"curve")," - The curve to use for the key derivation.\nMust be ",(0,r.kt)("inlineCode",{parentName:"li"},"'ed25519'")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"'secp256k1'"),".")),(0,r.kt)("h3",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,"An object representing the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/satoshilabs/slips/blob/master/slip-0010.md"},"SLIP-10")," HD tree node and containing\nits corresponding key material:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"depth")," - The 0-indexed path depth of the node."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"parentFingerprint")," - The fingerprint of the parent key, or 0 if this is a master node."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"index")," - The index of the node, or 0 if this is a master node."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"privateKey")," - The private key of the node."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"publicKey")," - The public key of the node."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"chainCode")," - The chain code of the node."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"curve")," - The name of the curve used by the node: ",(0,r.kt)("inlineCode",{parentName:"li"},"'ed25519'")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"'secp256k1'"),".")),(0,r.kt)("h3",{id:"example-3"},"Example"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{label:"Manifest file",value:"tab1",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"initialPermissions": {\n  "snap_getBip32Entropy": [\n    {\n      "path": ["m", "44\'", "3\'"],\n      "curve": "secp256k1" // Or "ed25519"\n    }\n  ]\n}\n'))),(0,r.kt)(l.Z,{label:"JavaScript",value:"tab2",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { SLIP10Node } from '@metamask/key-tree';\n\n// This example uses Dogecoin, which has a derivation path starting with `m/44'/3'`.\nconst dogecoinNode = await snap.request({\n  method: 'snap_getBip32Entropy',\n  params: {\n    // Must be specified exactly in the manifest\n    path: ['m', \"44'\", \"3'\"],\n    curve: 'secp256k1',\n  },\n});\n\n// Next, create an instance of a SLIP-10 node for the Dogecoin node.\nconst dogecoinSlip10Node = await SLIP10Node.fromJSON(dogecoinNode);\n\n// m / 44' / 3' / 0'\nconst accountKey0 = await dogecoinSlip10Node.derive([\"bip32:0'\"]);\n\n// m / 44' / 3' / 1'\nconst accountKey1 = await dogecoinSlip10Node.derive([\"bip32:1'\"]);\n\n// Now, you can ask the user to sign transactions, etc.\n")))),(0,r.kt)("h2",{id:"snap_getbip32publickey"},"snap_getBip32PublicKey"),(0,r.kt)("p",null,"Gets the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki"},"BIP-32")," public key for the\nderivation path specified by the ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," parameter.\nNote that this returns the public key, not the extended public key (",(0,r.kt)("inlineCode",{parentName:"p"},"xpub"),"), or Ethereum address."),(0,r.kt)("h3",{id:"parameters-4"},"Parameters"),(0,r.kt)("p",null,"An object containing:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path")," - An array, starting with ",(0,r.kt)("inlineCode",{parentName:"li"},"m"),", containing the BIP-32 derivation path to the public key to\nretrieve.\nFor example, ",(0,r.kt)("inlineCode",{parentName:"li"},'["m", "44\'", "60\'"]'),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"curve")," - The curve to use for the key derivation.\nMust be ",(0,r.kt)("inlineCode",{parentName:"li"},"'ed25519'")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"'secp256k1'"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"compressed")," - Indicates whether the public key should be compressed.\nThe default is ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,r.kt)("h3",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,"The public key as hexadecimal string."),(0,r.kt)("h3",{id:"example-4"},"Example"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{label:"Manifest file",value:"tab1",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"initialPermissions": {\n  "snap_getBip32PublicKey": [\n    {\n      "path": ["m", "44\'", "3\'", "0\'", "0", "0"],\n      "curve": "secp256k1" // Or "ed25519"\n    }\n  ]\n}\n'))),(0,r.kt)(l.Z,{label:"JavaScript",value:"tab2",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// This example uses Dogecoin, which has a derivation path starting with `m/44'/3'`.\nconst dogecoinPublicKey = await snap.request({\n  method: 'snap_getBip32PublicKey',\n  params: {\n    // The path and curve must be specified in the initial permissions.\n    path: ['m', \"44'\", \"3'\", \"0'\", '0', '0'],\n    curve: 'secp256k1',\n    compressed: false,\n  },\n});\n\n// `0x...`\nconsole.log(dogecoinPublicKey);\n")))),(0,r.kt)("h2",{id:"snap_getbip44entropy"},"snap_getBip44Entropy"),(0,r.kt)("admonition",{title:"important",type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"If you call this method, you receive the user's parent key for the protocol they request.\nYou're managing the user's keys and assets on their behalf.\nTheir safety is your responsibility.")),(0,r.kt)("p",null,"Gets the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki"},"BIP-44")," ",(0,r.kt)("inlineCode",{parentName:"p"},"coin_type")," key\nfor the ",(0,r.kt)("inlineCode",{parentName:"p"},"coin_type")," number specified by the method name.\nSee ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/satoshilabs/slips/blob/master/slip-0044.md"},"SLIP-44")," for the list of\navailable protocols and their ",(0,r.kt)("inlineCode",{parentName:"p"},"coin_type")," values."),(0,r.kt)("p",null,"This method is designed to be used with the\n",(0,r.kt)("a",{parentName:"p",href:"https://npmjs.com/package/@metamask/key-tree"},(0,r.kt)("inlineCode",{parentName:"a"},"@metamask/key-tree"))," module.\n",(0,r.kt)("inlineCode",{parentName:"p"},"@metamask/key-tree")," can help you get the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#extended-keys"},"extended private keys"),"\nfor user addresses, but it's your responsibility to know how to use those keys to, for example,\nderive an address for the relevant protocol or sign a transaction for the user."),(0,r.kt)("h3",{id:"parameters-5"},"Parameters"),(0,r.kt)("p",null,"An object containing ",(0,r.kt)("inlineCode",{parentName:"p"},"coinType"),", the BIP-44 coin type to get the entropy for."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Coin type 60 is reserved for MetaMask externally owned accounts and blocked for Snaps.\nIf you wish to connect to MetaMask accounts in a Snap, use\n",(0,r.kt)("a",{parentName:"p",href:"/1089-get-started-revamp/snaps/reference/permissions/#endowmentethereum-provider"},(0,r.kt)("inlineCode",{parentName:"a"},"endowment:ethereum-provider"))," and\n",(0,r.kt)("a",{parentName:"p",href:"/wallet/reference/eth_requestAccounts"},(0,r.kt)("inlineCode",{parentName:"a"},"eth_requestAccounts")),".")),(0,r.kt)("h3",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,"An object representing the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki"},"BIP-44")," ",(0,r.kt)("inlineCode",{parentName:"p"},"coin_type")," HD tree node\nand containing its corresponding key material:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"coin_type")," - The BIP-44 ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/satoshilabs/slips/blob/master/slip-0044.md"},"coin type"),"\nvalue of the node."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"depth")," - The 0-indexed BIP-44 path depth of the node.\nSince this is a ",(0,r.kt)("inlineCode",{parentName:"li"},"coin_type")," node, the depth is ",(0,r.kt)("inlineCode",{parentName:"li"},"2"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"privateKey")," - The hexadecimal-encoded string representation of the private key for the node."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"publicKey")," - The hexadecimal-encoded string representation of the public key for the node."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"chainCode")," - The hexadecimal-encoded string representation of the chain code for the node."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path")," - A human-readable representation of the BIP-44 HD tree path of the node.\nSince this is a ",(0,r.kt)("inlineCode",{parentName:"li"},"coin_type")," node, the path is of the form ",(0,r.kt)("inlineCode",{parentName:"li"},"m / 44' / coin_type'"),".")),(0,r.kt)("h3",{id:"example-5"},"Example"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{label:"Manifest file",value:"tab1",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"initialPermissions": {\n  "snap_getBip44Entropy": [\n    {\n      "coinType": 3\n    }\n  ]\n}\n'))),(0,r.kt)(l.Z,{label:"JavaScript",value:"tab2",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { getBIP44AddressKeyDeriver } from '@metamask/key-tree';\n\n// This example uses Dogecoin, which has `coin_type` 3.\nconst dogecoinNode = await snap.request({\n  method: 'snap_getBip44Entropy',\n  params: {\n    coinType: 3,\n  },\n});\n\n// Next, create an address key deriver function for the Dogecoin coin_type node.\n// In this case, its path is: m / 44' / 3' / 0' / 0 / address_index\nconst deriveDogecoinAddress = await getBIP44AddressKeyDeriver(dogecoinNode);\n\n// These are BIP-44 nodes containing the extended private keys for\n// the respective derivation paths.\n\n// m / 44' / 3' / 0' / 0 / 0\nconst addressKey0 = await deriveDogecoinAddress(0);\n\n// m / 44' / 3' / 0' / 0 / 1\nconst addressKey1 = await deriveDogecoinAddress(1);\n\n// Now, you can ask the user to sign transactions, etc.\n")))),(0,r.kt)("h2",{id:"snap_getentropy"},"snap_getEntropy"),(0,r.kt)("p",null,"Gets a deterministic 256-bit entropy value, specific to the Snap and the user's account.\nYou can use this entropy to generate a private key, or any other value that requires a high level of\nrandomness.\nOther Snaps can't access this entropy, and it changes if the user's secret recovery phrase changes."),(0,r.kt)("p",null,"You can optionally specify a salt to generate different entropy for different purposes.\nUsing a salt results in entropy unrelated to the entropy generated without a salt."),(0,r.kt)("p",null,"This value is deterministic: it's always the same for the same Snap, user account, and salt."),(0,r.kt)("h3",{id:"parameters-6"},"Parameters"),(0,r.kt)("p",null,"An object containing:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"version")," - The number ",(0,r.kt)("inlineCode",{parentName:"li"},"1"),".\nThis is reserved for future use."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"salt")," (optional) - An arbitrary string to be used as a salt for the entropy.\nThis can be used to generate different entropy for different purposes.")),(0,r.kt)("h3",{id:"returns-5"},"Returns"),(0,r.kt)("p",null,"The entropy as a hexadecimal string."),(0,r.kt)("h3",{id:"example-6"},"Example"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{label:"Manifest file",value:"tab1",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"initialPermissions": {\n  "snap_getEntropy": {}\n}\n'))),(0,r.kt)(l.Z,{label:"JavaScript",value:"tab2",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const entropy = await snap.request({\n  method: 'snap_getEntropy',\n  params: {\n    version: 1,\n    salt: 'foo', // Optional\n  },\n});\n\n// `0x...`\nconsole.log(entropy);\n")))),(0,r.kt)("h2",{id:"snap_getlocale"},"snap_getLocale"),(0,r.kt)("admonition",{type:"flaskOnly"}),(0,r.kt)("p",null,"Gets the user's locale setting. You can use this method to localize text in your snap."),(0,r.kt)("h3",{id:"returns-6"},"Returns"),(0,r.kt)("p",null,"The user's locale setting as a ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/MetaMask/metamask-extension/blob/develop/app/_locales/index.json"},"language code"),"."),(0,r.kt)("h3",{id:"example-7"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { panel, text } from '@metamask/snaps-ui';\n\nconst locale = await snap.request({ method: 'snap_getLocale' });\n\nlet greeting = 'Hello';\nif(locale === 'es') {\n  greeting = 'Hola';\n}\n\nawait snap.request({\n  method: 'snap_dialog',\n  params: {\n    type: 'Alert',\n    content: panel([\n      text(greeting),\n    ]),\n  },\n});\n")),(0,r.kt)("h2",{id:"snap_manageaccounts"},"snap_manageAccounts"),(0,r.kt)("admonition",{type:"flaskOnly"}),(0,r.kt)("p",null,"Manages ",(0,r.kt)("a",{parentName:"p",href:"/1089-get-started-revamp/snaps/concepts/keyring-api"},"account management Snap")," accounts.\nThis method is organized into multiple sub-methods which each take their own parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#createaccount"},(0,r.kt)("inlineCode",{parentName:"a"},"createAccount"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#updateaccount"},(0,r.kt)("inlineCode",{parentName:"a"},"updateAccount"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#deleteaccount"},(0,r.kt)("inlineCode",{parentName:"a"},"deleteAccount"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#listaccounts"},(0,r.kt)("inlineCode",{parentName:"a"},"listAccounts"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#submitresponse"},(0,r.kt)("inlineCode",{parentName:"a"},"submitResponse")))),(0,r.kt)("h3",{id:"createaccount"},"createAccount"),(0,r.kt)("p",null,"Creates a new Snap account."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The Snap is responsible for maintaining its own record of accounts.\nThis can be done using ",(0,r.kt)("a",{parentName:"p",href:"#snap_managestate"},(0,r.kt)("inlineCode",{parentName:"a"},"snap_manageState")),".")),(0,r.kt)("h4",{id:"parameters-7"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"account")," - A ",(0,r.kt)("a",{parentName:"p",href:"/1089-get-started-revamp/snaps/reference/keyring-api/variables/KeyringAccountStruct"},(0,r.kt)("inlineCode",{parentName:"a"},"KeyringAccount"))," object."),(0,r.kt)("h4",{id:"returns-7"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"null")),(0,r.kt)("h4",{id:"example-8"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Keyring, KeyringAccount } from '@metamask/keyring-api';\n\nclass MyKeyring implements Keyring {\n  // ... other methods\n\n  async createAccount(\n    name: string,\n    options: Record<string, Json> | null = null,\n  ): Promise<KeyringAccount> {\n\n    const account: KeyringAccount = {\n      id: uuid(),\n      name,\n      options,\n      address,\n      supportedMethods: [\n        'eth_sendTransaction',\n        'eth_sign',\n        'eth_signTransaction',\n        'eth_signTypedData_v1',\n        'eth_signTypedData_v2',\n        'eth_signTypedData_v3',\n        'eth_signTypedData_v4',\n        'eth_signTypedData',\n        'personal_sign',\n      ],\n      type: 'eip155:eoa',\n    };\n\n    // Store the account in state\n\n    await snap.request({\n      method: 'snap_manageAccounts',\n      params: {\n        method: 'createAccount',\n        params: { account },\n      },\n    });\n\n    return account;\n  }\n}\n")),(0,r.kt)("h3",{id:"updateaccount"},"updateAccount"),(0,r.kt)("p",null,"Updates an existing Snap account."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The Snap is responsible for maintaining its own record of accounts.\nThis can be done using ",(0,r.kt)("a",{parentName:"p",href:"#snap_managestate"},(0,r.kt)("inlineCode",{parentName:"a"},"snap_manageState")),".")),(0,r.kt)("h4",{id:"parameters-8"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"account")," - A ",(0,r.kt)("a",{parentName:"p",href:"/1089-get-started-revamp/snaps/reference/keyring-api/variables/KeyringAccountStruct"},(0,r.kt)("inlineCode",{parentName:"a"},"KeyringAccount"))," object."),(0,r.kt)("h4",{id:"returns-8"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"null")),(0,r.kt)("h4",{id:"example-9"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Keyring, KeyringAccount } from '@metamask/keyring-api';\n\nclass MyKeyring implements Keyring {\n  // ... other methods\n\n  async updateAccount(account: KeyringAccount): Promise<void> {\n    // Store the new account details in state\n\n    await snap.request({\n      method: 'snap_manageAccounts',\n      params: {\n        method: 'updateAccount',\n        params: { account },\n      },\n    });\n  }\n}\n")),(0,r.kt)("h3",{id:"deleteaccount"},"deleteAccount"),(0,r.kt)("p",null,"Deletes a Snap account."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The Snap is responsible for maintaining its own record of accounts.\nThis can be done using ",(0,r.kt)("a",{parentName:"p",href:"#snap_managestate"},(0,r.kt)("inlineCode",{parentName:"a"},"snap_manageState")),".")),(0,r.kt)("h4",{id:"parameters-9"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"id")," - The ID of the account to be deleted."),(0,r.kt)("h4",{id:"returns-9"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"null")),(0,r.kt)("h4",{id:"example-10"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Keyring } from '@metamask/keyring-api';\n\nclass MyKeyring implements Keyring {\n  // ... other methods\n\n  async deleteAccount(id: string): Promise<void> {\n    // Delete the account from state\n\n    await snap.request({\n      method: 'snap_manageAccounts',\n      params: {\n        method: 'deleteAccount',\n        params: { id },\n      },\n    });\n  }\n}\n")),(0,r.kt)("h3",{id:"listaccounts"},"listAccounts"),(0,r.kt)("p",null,"Lists the calling Snap's accounts that are known to MetaMask.\nThis method does not call back to the Snap.\nInstead, the Snap can use it to check whether there's a discrepancy between the Snap's internal\nstate of accounts and the state known to MetaMask."),(0,r.kt)("h4",{id:"returns-10"},"Returns"),(0,r.kt)("p",null,"An array of ",(0,r.kt)("a",{parentName:"p",href:"/1089-get-started-revamp/snaps/reference/keyring-api/variables/KeyringAccountStruct"},"keyring accounts"),"."),(0,r.kt)("h4",{id:"example-11"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Keyring, KeyringAccount } from '@metamask/keyring-api';\n\nclass MyKeyring implements Keyring {\n  // ... other methods\n\n  async checkIfAccountsInSync(): Promise<boolean> {\n\n    const knownAccounts: KeyringAccount[] = /* grab accounts from Snap state */;\n\n    const listedAccounts: KeyringAccount[] = await snap.request({\n      method: 'snap_manageAccounts',\n      params: {\n        method: 'listAccounts'\n      },\n    });\n\n    // compare the arrays and return the response\n  }\n}\n")),(0,r.kt)("h3",{id:"submitresponse"},"submitResponse"),(0,r.kt)("p",null,"Finalizes a signing request.\nThis is usually called as part of the ",(0,r.kt)("inlineCode",{parentName:"p"},"approveRequest")," method of the\n",(0,r.kt)("a",{parentName:"p",href:"/1089-get-started-revamp/snaps/reference/keyring-api/type-aliases/Keyring"},(0,r.kt)("inlineCode",{parentName:"a"},"Keyring"))," interface."),(0,r.kt)("h4",{id:"parameters-10"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"id")," - The ID of the request to finalize."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result")," - The result that should be returned to the original JSON-RPC caller.")),(0,r.kt)("h4",{id:"returns-11"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"null")),(0,r.kt)("h4",{id:"example-12"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Keyring } from '@metamask/keyring-api';\nimport { Json } from '@metamask/utils';\n\nclass MyKeyring implements Keyring {\n  // ... other methods\n\n  async approveRequest(id: string, result?: Json): Promise<void> {\n    // Do any Snap-side logic to finish approving the request\n\n    await snap.request({\n      method: 'snap_manageAccounts',\n      params: {\n        method: 'submitResponse',\n        params: { id, result}\n      },\n    });\n  }\n}\n")),(0,r.kt)("h2",{id:"snap_managestate"},"snap_manageState"),(0,r.kt)("p",null,"Allows the Snap to persist up to 100 MB of data to disk and retrieve it at will.\nThe data is automatically encrypted using a Snap-specific key and automatically decrypted when retrieved."),(0,r.kt)("h3",{id:"parameters-11"},"Parameters"),(0,r.kt)("p",null,"An object containing:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"operation")," - The state operation to perform (",(0,r.kt)("inlineCode",{parentName:"li"},"'clear'"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"'get'"),", or ",(0,r.kt)("inlineCode",{parentName:"li"},"'update'"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"newState")," - The value to update state with if the operation is ",(0,r.kt)("inlineCode",{parentName:"li"},"update"),", and nothing otherwise.")),(0,r.kt)("h3",{id:"returns-12"},"Returns"),(0,r.kt)("p",null,"The value stored in state if the operation is ",(0,r.kt)("inlineCode",{parentName:"p"},"get"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," otherwise."),(0,r.kt)("h3",{id:"example-13"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Persist some data.\nawait snap.request({\n  method: 'snap_manageState',\n  params: { operation: 'update', newState: { hello: 'world' } },\n});\n\n// At a later time, get the data stored.\nconst persistedData = await snap.request({\n  method: 'snap_manageState',\n  params: { operation: 'get' },\n});\n\nconsole.log(persistedData);\n// { hello: 'world' }\n\n// If there's no need to store data anymore, clear it out.\nawait snap.request({\n  method: 'snap_manageState',\n  params: { operation: 'clear' },\n});\n")),(0,r.kt)("h2",{id:"snap_notify"},"snap_notify"),(0,r.kt)("p",null,"Displays a notification in MetaMask or natively in the browser.\nSnaps can trigger a short notification text for actionable or time sensitive information."),(0,r.kt)("h3",{id:"parameters-12"},"Parameters"),(0,r.kt)("p",null,"An object containing the contents of the notification:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type")," - The notification type.\nSpecify ",(0,r.kt)("inlineCode",{parentName:"li"},"inApp")," to display the notification in the MetaMask UI, and ",(0,r.kt)("inlineCode",{parentName:"li"},"native")," to display the\nnotification in the browser.\nWe recommend using ",(0,r.kt)("inlineCode",{parentName:"li"},"inApp")," because there's no guarantee that native notifications are displayed to\nthe user."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"message")," - A message to show in the notification.")),(0,r.kt)("h3",{id:"example-14"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"await snap.request({\n  method: 'snap_notify',\n  params: {\n    type: 'inApp',\n    message: 'Hello, world!',\n  },\n});\n")))}h.isMDXComponent=!0},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(67294),r=n(86010);const i={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,l),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(87462),r=n(67294),i=n(86010),l=n(12466),o=n(70989),s=n(72389);const p={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function u(e){let{className:t,block:n,selectedValue:o,selectValue:s,tabValues:u}=e;const m=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.o5)(),d=e=>{const t=e.currentTarget,n=m.indexOf(t),a=u[n].value;a!==o&&(c(t),s(a))},h=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=m.indexOf(e.currentTarget)+1;t=m[n]??m[0];break}case"ArrowLeft":{const n=m.indexOf(e.currentTarget)-1;t=m[n]??m[m.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>m.push(e),onKeyDown:h,onClick:d},l,{className:(0,i.Z)("tabs__item",p.tabItem,l?.className,{"tabs__item--active":o===t})}),n??t)})))}function m(e){let{lazy:t,children:n,selectedValue:a}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function c(e){const t=(0,o.Y)(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",p.tabList)},r.createElement(u,(0,a.Z)({},e,t)),r.createElement(m,(0,a.Z)({},e,t)))}function d(e){const t=(0,s.Z)();return r.createElement(c,(0,a.Z)({key:String(t)},e))}},70989:(e,t,n)=>{n.d(t,{Y:()=>c});var a=n(67294),r=n(16550),i=n(91980),l=n(67392),o=n(50012);function s(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function p(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??s(n);return function(e){const t=(0,l.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function u(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const l=(0,r.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(o),(0,a.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(l.location.search);t.set(o,e),l.replace({...l.location,search:t.toString()})}),[o,l])]}function c(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,i=p(e),[l,s]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:i}))),[c,d]=m({queryString:n,groupId:r}),[h,k]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,i]=(0,o.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:r}),g=(()=>{const e=c??h;return u({value:e,tabValues:i})?e:null})();(0,a.useLayoutEffect)((()=>{g&&s(g)}),[g]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!u({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);s(e),d(e),k(e)}),[d,k,i]),tabValues:i}}}}]);