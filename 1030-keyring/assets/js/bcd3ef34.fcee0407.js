"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[82],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>g});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),c=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=c(e.components);return a.createElement(p.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},k=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),u=c(t),k=r,g=u["".concat(p,".").concat(k)]||u[k]||m[k]||i;return t?a.createElement(g,s(s({ref:n},l),{},{components:t})):a.createElement(g,s({ref:n},l))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=k;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[u]="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}k.displayName="MDXCreateElement"},38413:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=t(87462),r=(t(67294),t(3905));const i={description:"Learn about the Snaps Keyring API.",sidebar_position:6,sidebar_custom_props:{flask_only:!0}},s="About the Keyring API",o={unversionedId:"concepts/keyring-api",id:"concepts/keyring-api",title:"About the Keyring API",description:"Learn about the Snaps Keyring API.",source:"@site/snaps/concepts/keyring-api.md",sourceDirName:"concepts",slug:"/concepts/keyring-api",permalink:"/1030-keyring/snaps/concepts/keyring-api",draft:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/snaps/concepts/keyring-api.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{description:"Learn about the Snaps Keyring API.",sidebar_position:6,sidebar_custom_props:{flask_only:!0}},sidebar:"snapsSidebar",previous:{title:"Snaps design guidelines",permalink:"/1030-keyring/snaps/concepts/design-guidelines"},next:{title:"Tutorials",permalink:"/1030-keyring/snaps/tutorials"}},p={},c=[{value:"Terminology",id:"terminology",level:2},{value:"System context diagram",id:"system-context-diagram",level:2},{value:"Keyring Snap installation flow",id:"keyring-snap-installation-flow",level:2},{value:"Keyring account creation flow",id:"keyring-account-creation-flow",level:2},{value:"Transaction flows",id:"transaction-flows",level:2},{value:"Synchronous transaction flow",id:"synchronous-transaction-flow",level:3},{value:"Asynchronous transaction flow",id:"asynchronous-transaction-flow",level:3},{value:"Supported signing methods",id:"supported-signing-methods",level:2},{value:"Example",id:"example",level:2}],l={toc:c},u="wrapper";function m(e){let{components:n,...i}=e;return(0,r.kt)(u,(0,a.Z)({},l,i,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"about-the-keyring-api"},"About the Keyring API"),(0,r.kt)("p",null,"The Keyring API integrates custom EVM accounts inside MetaMask.\nYou can use the Keyring API to display custom accounts, such as multi-party computation (MPC)\naccounts, alongside regular MetaMask accounts in the user interface:"),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{src:t(56517).Z,alt:"Keyring Snap accounts in Metamask UI",width:"360",style:{border:"1px solid gray"}})),(0,r.kt)("p",null,"To use the Keyring API, you first implement the API in a Keyring Snap.\nYour dapp can then invoke Keyring API methods on the Keyring Snap to connect to and interact with\nthe custom accounts."),(0,r.kt)("admonition",{type:"flaskOnly"}),(0,r.kt)("admonition",{title:"see also",type:"tip"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/1030-keyring/snaps/how-to/use-keyring-api/snap/"},"Create a Keyring Snap"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/1030-keyring/snaps/how-to/use-keyring-api/snap/security"},"Keyring Snap security guidelines")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/1030-keyring/snaps/how-to/use-keyring-api/dapp"},"Use the Keyring API from a dapp")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/1030-keyring/snaps/reference/keyring-api/"},"Keyring API reference")))),(0,r.kt)("h2",{id:"terminology"},"Terminology"),(0,r.kt)("p",null,"The following terminology is used across the Keyring API:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Blockchain account"),": An object in a single blockchain, representing an account, with its\nbalance, nonce, and other account details."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Request"),": A request from a dapp to MetaMask."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Keyring account"),": An account model that represents one or more blockchain accounts."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Keyring Snap")," or ",(0,r.kt)("strong",{parentName:"li"},"account Snap"),": A Snap that implements the Keyring API."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Keyring request"),": A request from MetaMask to a Keyring Snap.\nMetaMask wraps the original request sent by the dapp and adds some metadata to it.")),(0,r.kt)("h2",{id:"system-context-diagram"},"System context diagram"),(0,r.kt)("p",null,"The following diagram shows the system context when interacting with accounts managed by a Keyring Snap:"),(0,r.kt)("p",{align:"center"},(0,r.kt)("mermaid",{value:"graph TD\n  User --\x3e|Use to submit requests<br/>and manage accounts| MetaMask\n  User --\x3e|Start requests| Dapp\n  User --\x3e|Use to manage<br/>requests and accounts| Site\n  Dapp --\x3e|Submit requests| MetaMask\n  Site[Snap companion dapp] --\x3e|Manage requests<br/>and accounts| MetaMask\n  MetaMask --\x3e|Submit requests and<br/>manage accounts| Snap\n  Snap --\x3e|Notify about account<br/>and request events| MetaMask"})),(0,r.kt)("p",null,"The diagram contains the following components:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"User"),": The user interacting with the dapp, the Snap companion dapp, and MetaMask."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Dapp"),": The dapp requesting an action to be performed on an account."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"MetaMask"),": The wallet the dapp connects to.\nMetaMask routes requests to the Keyring Snap and lets the user perform some level of account management."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Snap"),": The Keyring Snap that implements the Keyring API to manage the user's accounts and\nhandle requests that use these accounts."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Snap companion dapp"),": The Snap's user interface component that allows the user to interact with\nthe Snap to manage accounts and requests.")),(0,r.kt)("h2",{id:"keyring-snap-installation-flow"},"Keyring Snap installation flow"),(0,r.kt)("p",null,"The first process a user encounters when using a Keyring Snap is the Snap installation flow.\nThis process can be initiated through MetaMask's or the Snap companion dapp.\nThe flow looks like the following:"),(0,r.kt)("mermaid",{value:"%%{\n  init: {\n    'sequence': {\n      'actorMargin': 25,\n      'width': 225\n    }\n  }\n}%%\n\nsequenceDiagram\nautonumber\n\nactor User\nparticipant MetaMask\nparticipant Snap\nparticipant Site as Snap companion dapp\n\nalt Optional\n  User ->>+ MetaMask: Add account Snap\n  MetaMask ->> MetaMask: Display suggested Snaps\n  User ->> MetaMask: Select Snap\n  MetaMask ->> Site: Open in a new tab\n  deactivate MetaMask\nend\n\nSite ->>+ MetaMask: Install Snap?\nMetaMask ->> MetaMask: Display permissions dialog\nUser ->> MetaMask: Approve permissions\nMetaMask --\x3e>- Site: OK"}),(0,r.kt)("p",null,"The MetaMask account selection modal has an option called ",(0,r.kt)("strong",{parentName:"p"},"Add account Snap"),".\nThis option shows a list of Keyring Snaps.\nEach Snap redirects the user to the companion dapp that contains the user interface to configure and\nmanage the Snap."),(0,r.kt)("h2",{id:"keyring-account-creation-flow"},"Keyring account creation flow"),(0,r.kt)("p",null,"Once the Keyring Snap is installed, the user can use the Snap companion dapp to create or import\ncustom accounts.\nThe flow looks like the following:"),(0,r.kt)("mermaid",{value:"%%{\n  init: {\n    'sequence': {\n      'actorMargin': 15,\n      'width': 245\n    }\n  }\n}%%\n\nsequenceDiagram\nautonumber\n\nactor User\nparticipant MetaMask\nparticipant Snap\nparticipant Site as Snap companion dapp\n\nUser ->>+ Site: Create new account\nSite ->> Site: Custom logic to create account\nSite ->>+ Snap: keyring_createAccount(options)\nSnap ->> Snap: Custom logic to create account\nSnap ->>+ MetaMask: snap_manageAccounts(\"notify:accountCreated\", account)\nUser ->> MetaMask: Approve account creation\nMetaMask --\x3e>- Snap: OK\nSnap --\x3e>- Site: OK\nSite --\x3e>- User: Done"}),(0,r.kt)("p",null,"The companion dapp presents a user interface allowing the user to configure their custom account.\nThe dapp uses the ",(0,r.kt)("a",{parentName:"p",href:"/1030-keyring/snaps/reference/keyring-api/classes/KeyringSnapRpcClient#createaccount"},(0,r.kt)("inlineCode",{parentName:"a"},"createAccount")),"\nmethod of the ",(0,r.kt)("a",{parentName:"p",href:"/1030-keyring/snaps/reference/keyring-api/classes/KeyringSnapRpcClient"},(0,r.kt)("inlineCode",{parentName:"a"},"KeyringSnapRpcClient")),",\nwhich calls the ",(0,r.kt)("a",{parentName:"p",href:"/1030-keyring/snaps/reference/keyring-api/type-aliases/Keyring#createaccount"},(0,r.kt)("inlineCode",{parentName:"a"},"createAccount")),"\nmethod of the ",(0,r.kt)("a",{parentName:"p",href:"/1030-keyring/snaps/reference/keyring-api/type-aliases/Keyring"},(0,r.kt)("inlineCode",{parentName:"a"},"Keyring"))," interface, creating an\naccount based on the parameters passed to the method."),(0,r.kt)("p",null,"The Snap keeps track of the accounts that it creates using ",(0,r.kt)("a",{parentName:"p",href:"/1030-keyring/snaps/reference/rpc-api#snap_managestate"},(0,r.kt)("inlineCode",{parentName:"a"},"snap_manageState")),".\nOnce the Snap has created an account, it notifies MetaMask using the\n",(0,r.kt)("a",{parentName:"p",href:"/1030-keyring/snaps/reference/rpc-api#createaccount"},(0,r.kt)("inlineCode",{parentName:"a"},"createAccount"))," sub-method of\n",(0,r.kt)("a",{parentName:"p",href:"/1030-keyring/snaps/reference/rpc-api#snap_manageaccounts"},(0,r.kt)("inlineCode",{parentName:"a"},"snap_manageAccounts")),"."),(0,r.kt)("p",null,"Once the Snap has created an account, that account can be used to sign messages and transactions."),(0,r.kt)("h2",{id:"transaction-flows"},"Transaction flows"),(0,r.kt)("p",null,"The Keyring API supports two flows for handling requests: ",(0,r.kt)("a",{parentName:"p",href:"#synchronous-transaction-flow"},"synchronous"),"\nand ",(0,r.kt)("a",{parentName:"p",href:"#asynchronous-transaction-flow"},"asynchronous"),"."),(0,r.kt)("p",null,"In general, you should use the asynchronous flow when the request requires user interaction (for\nexample, using a hardware key or a threshold signature scheme) or when the request takes a long time\nto complete.\nYou should use the synchronous flow for any other use case."),(0,r.kt)("h3",{id:"synchronous-transaction-flow"},"Synchronous transaction flow"),(0,r.kt)("p",null,"The synchronous flow looks like the following:"),(0,r.kt)("mermaid",{value:"%%{\n  init: {\n    'sequence': {\n      'actorMargin': 25,\n      'width': 225\n    }\n  }\n}%%\n\nsequenceDiagram\nautonumber\n\nactor User\nparticipant Dapp\nparticipant MetaMask\nparticipant Snap\n\nUser ->>+ Dapp: Create new sign request\nDapp ->>+ MetaMask: ethereum.request(request)\nMetaMask ->> MetaMask: Display request to user\nUser ->> MetaMask: Approve request\n\nMetaMask ->>+ Snap: keyring_submitRequest(request)\nSnap ->> Snap: Custom logic to handle request\nSnap --\x3e>- MetaMask: { pendind: false, result }\n\nMetaMask --\x3e>- Dapp: result\n\nDapp --\x3e>- User: Done"}),(0,r.kt)("p",null,"The flow starts when a user or dapp initiates a ",(0,r.kt)("a",{parentName:"p",href:"#supported-signing-methods"},"sign request"),".\nAt that point, MetaMask detects that this interaction is requested for an account controlled by the\nKeyring Snap."),(0,r.kt)("p",null,"After the user approves the transaction in MetaMask, MetaMask calls the\n",(0,r.kt)("a",{parentName:"p",href:"/1030-keyring/snaps/reference/keyring-api/type-aliases/Keyring#submitrequest"},(0,r.kt)("inlineCode",{parentName:"a"},"submitRequest"))," method of the\n",(0,r.kt)("a",{parentName:"p",href:"/1030-keyring/snaps/reference/keyring-api/type-aliases/Keyring"},(0,r.kt)("inlineCode",{parentName:"a"},"Keyring"))," interface, which receives the original\nRPC request and returns a\n",(0,r.kt)("a",{parentName:"p",href:"/1030-keyring/snaps/reference/keyring-api/variables/SubmitRequestResponseStruct"},(0,r.kt)("inlineCode",{parentName:"a"},"SubmitRequestResponse")),"\nwith ",(0,r.kt)("inlineCode",{parentName:"p"},"pending")," set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," set to the requested signature."),(0,r.kt)("h3",{id:"asynchronous-transaction-flow"},"Asynchronous transaction flow"),(0,r.kt)("p",null,"The asynchronous flow looks like the following:"),(0,r.kt)("mermaid",{value:"%%{\n  init: {\n    'sequence': {\n      'actorMargin': 20,\n      'width': 200\n    }\n  }\n}%%\n\nsequenceDiagram\nautonumber\n\nactor User\nparticipant Dapp\nparticipant MetaMask\nparticipant Snap\nparticipant Site as Snap companion dapp\n\nUser ->>+ Dapp: Create new sign request\nDapp ->>+ MetaMask: ethereum.request(request)\nMetaMask ->> MetaMask: Display request to user\nUser ->> MetaMask: Approve request\n\nMetaMask ->>+ Snap: keyring_submitRequest(request)\nSnap ->> Snap: Save request to Snap's state\nSnap --\x3e>- MetaMask: { pending: true, redirect? }\nalt There is a redirect URL\n  User ->> MetaMask: Acknowledge redirection\n  MetaMask ->>+ Site: Open redirect URL in a new tab\nend\ndeactivate MetaMask\n\nSite ->>+ Snap: keyring_getRequests(id)\nSnap --\x3e>- Site: request\n\nSite ->> Site: Custom logic to handle request\nSite ->>+ Snap: keyring_approveRequest(id, data?)\nSnap ->> Snap: Custom logic to handle request\nSnap ->>+ MetaMask: snap_manageAccounts(\"notify:requestApproved\", { id, result })\n\nMetaMask --\x3e> Dapp: result\nMetaMask --\x3e>- Snap: OK\nSnap --\x3e>- Site: OK\ndeactivate Site\n\nDapp --\x3e>- User: Done"}),(0,r.kt)("p",null,"The flow starts the same way as the ",(0,r.kt)("a",{parentName:"p",href:"#synchronous-transaction-flow"},"synchronous flow"),": a user or\ndapp initiates a ",(0,r.kt)("a",{parentName:"p",href:"#supported-signing-methods"},"sign request"),".\nAfter approval, the ",(0,r.kt)("a",{parentName:"p",href:"/1030-keyring/snaps/reference/keyring-api/type-aliases/Keyring#submitrequest"},(0,r.kt)("inlineCode",{parentName:"a"},"submitRequest")),"\nmethod of the Snap's ",(0,r.kt)("a",{parentName:"p",href:"/1030-keyring/snaps/reference/keyring-api/type-aliases/Keyring"},(0,r.kt)("inlineCode",{parentName:"a"},"Keyring"))," interface is called."),(0,r.kt)("p",null,"Since the Snap doesn't answer the request directly, it stores the pending request in its internal\nstate using ",(0,r.kt)("a",{parentName:"p",href:"/1030-keyring/snaps/reference/rpc-api#snap_managestate"},(0,r.kt)("inlineCode",{parentName:"a"},"snap_manageState")),".\nThe Snap sends a ",(0,r.kt)("inlineCode",{parentName:"p"},"{ pending: true, redirect? }")," response to indicate that the Keyring request will\nbe handled asynchronously.\nThis response can optionally contain a redirect URL that MetaMask will open in a new tab to allow\nthe user to interact with the Snap companion dapp."),(0,r.kt)("p",null,"The companion dapp gets the Snap's pending requests using the\n",(0,r.kt)("a",{parentName:"p",href:"/1030-keyring/snaps/reference/keyring-api/classes/KeyringSnapRpcClient#getrequest"},(0,r.kt)("inlineCode",{parentName:"a"},"getRequest")),"\nmethod of the ",(0,r.kt)("a",{parentName:"p",href:"/1030-keyring/snaps/reference/keyring-api/classes/KeyringSnapRpcClient"},(0,r.kt)("inlineCode",{parentName:"a"},"KeyringSnapRpcClient")),".\nIt resolves the request using the\n",(0,r.kt)("a",{parentName:"p",href:"/1030-keyring/snaps/reference/keyring-api/classes/KeyringSnapRpcClient#approverequest"},(0,r.kt)("inlineCode",{parentName:"a"},"approveRequest")),"\nmethod of the ",(0,r.kt)("a",{parentName:"p",href:"/1030-keyring/snaps/reference/keyring-api/classes/KeyringSnapRpcClient"},(0,r.kt)("inlineCode",{parentName:"a"},"KeyringSnapRpcClient")),",\nwhich calls the ",(0,r.kt)("a",{parentName:"p",href:"/1030-keyring/snaps/reference/keyring-api/type-aliases/Keyring#approverequest"},(0,r.kt)("inlineCode",{parentName:"a"},"approveRequest")),"\nmethod of the ",(0,r.kt)("a",{parentName:"p",href:"/1030-keyring/snaps/reference/keyring-api/type-aliases/Keyring"},(0,r.kt)("inlineCode",{parentName:"a"},"Keyring"))," interface.\nThis method receives the request's ID and final result.\nIt resolves the pending request using the ",(0,r.kt)("a",{parentName:"p",href:"/1030-keyring/snaps/reference/rpc-api#submitresponse"},(0,r.kt)("inlineCode",{parentName:"a"},"submitResponse")),"\nsub-method of ",(0,r.kt)("a",{parentName:"p",href:"/1030-keyring/snaps/reference/rpc-api#snap_manageaccounts"},(0,r.kt)("inlineCode",{parentName:"a"},"snap_manageAccounts")),", notifying\nMetaMask of the result."),(0,r.kt)("h2",{id:"supported-signing-methods"},"Supported signing methods"),(0,r.kt)("p",null,"A Keyring Snap can implement support for handling the following Ethereum signing methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"personal_sign")),(0,r.kt)("li",{parentName:"ul"},"(deprecated) ",(0,r.kt)("inlineCode",{parentName:"li"},"eth_sign")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"eth_signTransaction")," (",(0,r.kt)("inlineCode",{parentName:"li"},"eth_sendTransaction")," should be treated as ",(0,r.kt)("inlineCode",{parentName:"li"},"eth_signTransaction"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"eth_signTypedData_v4")),(0,r.kt)("li",{parentName:"ul"},"(deprecated) ",(0,r.kt)("inlineCode",{parentName:"li"},"eth_signTypedData_v1")),(0,r.kt)("li",{parentName:"ul"},"(deprecated) ",(0,r.kt)("inlineCode",{parentName:"li"},"eth_signTypedData_v3"))),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/MetaMask/snap-simple-keyring"},"example Keyring Snap source code")," for more information."))}m.isMDXComponent=!0},56517:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/accounts-ui-070dca33037f5063a08753cf792b8cb3.png"}}]);