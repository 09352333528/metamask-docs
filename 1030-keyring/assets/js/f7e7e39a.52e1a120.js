"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[1605],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),u=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},o="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),o=u(n),m=r,g=o["".concat(p,".").concat(m)]||o[m]||d[m]||i;return n?a.createElement(g,s(s({ref:t},c),{},{components:n})):a.createElement(g,s({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[o]="string"==typeof e?e:r,s[1]=l;for(var u=2;u<i;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4969:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const i={description:"Call Keyring API methods from your dapp.",sidebar_position:2},s="Use the Keyring API from a dapp",l={unversionedId:"how-to/use-keyring-api/dapp",id:"how-to/use-keyring-api/dapp",title:"Use the Keyring API from a dapp",description:"Call Keyring API methods from your dapp.",source:"@site/snaps/how-to/use-keyring-api/dapp.md",sourceDirName:"how-to/use-keyring-api",slug:"/how-to/use-keyring-api/dapp",permalink:"/1030-keyring/snaps/how-to/use-keyring-api/dapp",draft:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/snaps/how-to/use-keyring-api/dapp.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{description:"Call Keyring API methods from your dapp.",sidebar_position:2},sidebar:"snapsSidebar",previous:{title:"Keyring Snap security guidelines",permalink:"/1030-keyring/snaps/how-to/use-keyring-api/snap/security"},next:{title:"Use third-party Snaps",permalink:"/1030-keyring/snaps/how-to/use-3rd-party-snaps"}},p={},u=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Steps",id:"steps",level:2},{value:"1. Install the Keyring API",id:"1-install-the-keyring-api",level:3},{value:"2. Create the KeyringSnapRpcClient",id:"2-create-the-keyringsnaprpcclient",level:3},{value:"3. Call Keyring API methods",id:"3-call-keyring-api-methods",level:3},{value:"createAccount",id:"createaccount",level:3},{value:"getAccount",id:"getaccount",level:3},{value:"listAccounts",id:"listaccounts",level:3},{value:"updateAccount",id:"updateaccount",level:3},{value:"deleteAccount",id:"deleteaccount",level:3},{value:"submitRequest",id:"submitrequest",level:3},{value:"getRequest",id:"getrequest",level:3},{value:"listRequests",id:"listrequests",level:3},{value:"approveRequest",id:"approverequest",level:3},{value:"rejectRequest",id:"rejectrequest",level:3},{value:"filterAccountChains",id:"filteraccountchains",level:3}],c={toc:u},o="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(o,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"use-the-keyring-api-from-a-dapp"},"Use the Keyring API from a dapp"),(0,r.kt)("p",null,"Use the Keyring API from your dapp to create and interact with custom EVM accounts.\nUse the ",(0,r.kt)("a",{parentName:"p",href:"/1030-keyring/snaps/reference/keyring-api/classes/KeyringSnapRpcClient"},(0,r.kt)("inlineCode",{parentName:"a"},"KeyringSnapRpcClient"))," to\ninvoke Keyring API methods on your Keyring Snap."),(0,r.kt)("admonition",{type:"flaskOnly"}),(0,r.kt)("admonition",{title:"see also",type:"tip"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/1030-keyring/snaps/how-to/use-keyring-api/snap/"},"Create a Keyring Snap")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/1030-keyring/snaps/concepts/keyring-api"},"About the Keyring API")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/1030-keyring/snaps/reference/keyring-api/"},"Keyring API reference")))),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("a",{parentName:"li",href:"/1030-keyring/snaps/how-to/use-keyring-api/snap/"},"Keyring Snap")," set up."),(0,r.kt)("li",{parentName:"ul"},"A dapp from which to use to the Keyring API.")),(0,r.kt)("h2",{id:"steps"},"Steps"),(0,r.kt)("h3",{id:"1-install-the-keyring-api"},"1. Install the Keyring API"),(0,r.kt)("p",null,"Install ",(0,r.kt)("inlineCode",{parentName:"p"},"@metamask/keyring-api")," in your project directory using Yarn or npm:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @metamask/keyring-api\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @metamask/keyring-api\n")),(0,r.kt)("h3",{id:"2-create-the-keyringsnaprpcclient"},"2. Create the KeyringSnapRpcClient"),(0,r.kt)("p",null,"Create the ",(0,r.kt)("a",{parentName:"p",href:"/1030-keyring/snaps/reference/keyring-api/classes/KeyringSnapRpcClient"},(0,r.kt)("inlineCode",{parentName:"a"},"KeyringSnapRpcClient")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { KeyringSnapRpcClient } from \"@metamask/keyring-api\";\nimport { defaultSnapOrigin as snapId } from '../config';\n\nlet client = new KeyringSnapRpcClient(snapId, window.ethereum);\n")),(0,r.kt)("h3",{id:"3-call-keyring-api-methods"},"3. Call Keyring API methods"),(0,r.kt)("p",null,"You can now use the ",(0,r.kt)("a",{parentName:"p",href:"/1030-keyring/snaps/reference/keyring-api/classes/KeyringSnapRpcClient"},(0,r.kt)("inlineCode",{parentName:"a"},"KeyringSnapRpcClient")),"\nto invoke the following Keyring API methods on your Snap."),(0,r.kt)("p",null,"Invoke the Keyring API methods on your Keyring Snap from your dapp.\nFor example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const client = new KeyringSnapRpcClient(snapId, window.ethereum);\nconst accounts = await client.listAccounts();\n")),(0,r.kt)("h3",{id:"createaccount"},"createAccount"),(0,r.kt)("p",null,"Creates a Keyring account."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'let keyringAccount = await client.createAccount("KeyringAccount1");\n')),(0,r.kt)("h3",{id:"getaccount"},"getAccount"),(0,r.kt)("p",null,"Gets a Keyring account."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// accountId is returned when the account is created using createAccount.\nlet keyringAccount = await client.getAccount(accountId);\n")),(0,r.kt)("h3",{id:"listaccounts"},"listAccounts"),(0,r.kt)("p",null,"Lists all Keyring accounts created by the Snap."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"let keyringAccounts = await client.listAccounts();\n")),(0,r.kt)("h3",{id:"updateaccount"},"updateAccount"),(0,r.kt)("p",null,"Updates a Keyring account."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"let updatedAccount = await client.updateAccount(modifiedKeyringAccount);\n")),(0,r.kt)("h3",{id:"deleteaccount"},"deleteAccount"),(0,r.kt)("p",null,"Deletes a Keyring account."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"let snapResponse = await client.deleteAccount(accountId);\n")),(0,r.kt)("h3",{id:"submitrequest"},"submitRequest"),(0,r.kt)("p",null,"Submits a Keyring request."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { v4 as uuid } from "uuid";\n\n// Example submitting an eth_sendTransaction request\nlet submitRequestResponse = await client.submitRequest({\n    // ID of the account to which you want to submit this request\n    account: accountId,\n    scope: "eip155:1", // Ethereum Mainnet\n    request: {\n        jsonrpc: "2.0",\n        // Unique ID to identify every request\n        id: uuid(),\n        // The method and parameter structure is subjective to the Keyring API implementation in the Snap code.\n        method: "eth_sendTransaction",\n        params:\n            {\n                from: "",\n                to: "0xcEF0f7f7ee1650b4A8151f605d9258bA65D733F5",\n                data,\n                chainId: "1",\n            },\n        ,\n    },\n});\n')),(0,r.kt)("h3",{id:"getrequest"},"getRequest"),(0,r.kt)("p",null,"Gets a Keyring request."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// requestId is returned during request submission.\nlet keyringRequest = await client.getRequest(requestId);\n")),(0,r.kt)("h3",{id:"listrequests"},"listRequests"),(0,r.kt)("p",null,"Lists all requests submitted to the Snap."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"let requests = await client.listRequests();\n")),(0,r.kt)("h3",{id:"approverequest"},"approveRequest"),(0,r.kt)("p",null,"Approves a request."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// requestId is returned during request submission.\nawait client.approveRequest(requestId);\n")),(0,r.kt)("h3",{id:"rejectrequest"},"rejectRequest"),(0,r.kt)("p",null,"Rejects a request."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// requestId is returned during request submission.\nawait client.rejectRequest(requestId);\n")),(0,r.kt)("h3",{id:"filteraccountchains"},"filterAccountChains"),(0,r.kt)("p",null,"Returns a filtered list of CAIP-2 IDs representing the supported chains."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// accountId - ID of the account to be checked\n// chains - List of chains (CAIP-2) to be checked\nlet supportedChains = await client.filterAccountChains(accountId, chains);\n")))}d.isMDXComponent=!0}}]);