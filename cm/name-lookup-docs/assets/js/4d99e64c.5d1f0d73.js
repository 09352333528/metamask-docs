"use strict";(self.webpackChunkmetamask_docs=self.webpackChunkmetamask_docs||[]).push([[7289],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>f});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var m=o.createContext({}),p=function(e){var n=o.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=p(e.components);return o.createElement(m.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,m=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),c=p(t),d=r,f=c["".concat(m,".").concat(d)]||c[d]||u[d]||a;return t?o.createElement(f,s(s({ref:n},l),{},{components:t})):o.createElement(f,s({ref:n},l))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,s=new Array(a);s[0]=d;var i={};for(var m in n)hasOwnProperty.call(n,m)&&(i[m]=n[m]);i.originalType=e,i[c]="string"==typeof e?e:r,s[1]=i;for(var p=2;p<a;p++)s[p]=t[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},51341:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var o=t(87462),r=(t(67294),t(3905));const a={description:"Add custom domain name resolution to MetaMask.",sidebar_position:8},s="Implement custom name resolution",i={unversionedId:"how-to/custom-name-resolution",id:"how-to/custom-name-resolution",title:"Implement custom name resolution",description:"Add custom domain name resolution to MetaMask.",source:"@site/snaps/how-to/custom-name-resolution.md",sourceDirName:"how-to",slug:"/how-to/custom-name-resolution",permalink:"/cm/name-lookup-docs/snaps/how-to/custom-name-resolution",draft:!1,editUrl:"https://github.com/MetaMask/metamask-docs/edit/main/snaps/how-to/custom-name-resolution.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{description:"Add custom domain name resolution to MetaMask.",sidebar_position:8},sidebar:"snapsSidebar",previous:{title:"Connect to a Snap",permalink:"/cm/name-lookup-docs/snaps/how-to/connect-to-a-snap"},next:{title:"Reference",permalink:"/cm/name-lookup-docs/snaps/reference"}},m={},p=[{value:"Request permission to provide name resolution",id:"request-permission-to-provide-name-resolution",level:2},{value:"Implement custom name resolution",id:"implement-custom-name-resolution-1",level:2}],l={toc:p},c="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(c,(0,o.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"implement-custom-name-resolution"},"Implement custom name resolution"),(0,r.kt)("p",null,"The Snaps platform allows developers to implement custom domain resolution and reverse resolution.\nThe steps to implement this are:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Request ",(0,r.kt)("a",{parentName:"li",href:"/cm/name-lookup-docs/snaps/reference/permissions#endowmentname-lookup"},"permission to provide name resolution"),"."),(0,r.kt)("li",{parentName:"ol"},"Implement an ",(0,r.kt)("a",{parentName:"li",href:"/cm/name-lookup-docs/snaps/reference/entry-points#onnamelookup"},(0,r.kt)("inlineCode",{parentName:"a"},"onNameLookup")," entry point"),".")),(0,r.kt)("h2",{id:"request-permission-to-provide-name-resolution"},"Request permission to provide name resolution"),(0,r.kt)("p",null,"Like all other permissions and endowments, the permission to provide name resolution must be declared in the Snap manifest.\nThe permission is called ",(0,r.kt)("inlineCode",{parentName:"p"},"endowment:name-lookup"),", and optionally takes an array of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-2.md"},"CAIP-2 chain IDs")," for which your Snap can provide domain resolution."),(0,r.kt)("p",null,"As an example, to resolve Ethereum mainnet domains, add the following to the Snap's manifest:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="snap.manifest.json"',title:'"snap.manifest.json"'},'"initialPermissions": {\n  "endowment:name-lookup": [\n    "eip155:1"\n  ]\n}\n')),(0,r.kt)("h2",{id:"implement-custom-name-resolution-1"},"Implement custom name resolution"),(0,r.kt)("p",null,"To implement custom name resolution, your Snap must export an ",(0,r.kt)("inlineCode",{parentName:"p"},"onNameLookup")," entry point. This entry point receives a ",(0,r.kt)("inlineCode",{parentName:"p"},"chainId"),", and either a ",(0,r.kt)("inlineCode",{parentName:"p"},"domain")," or an ",(0,r.kt)("inlineCode",{parentName:"p"},"address"),".\nThe example below implements a very basic resolution from Unstoppable Domains domain names to Ethereum addresses in ",(0,r.kt)("inlineCode",{parentName:"p"},"onNameLookup"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="snap/src/index.ts"',title:'"snap/src/index.ts"'},"import type { OnNameLookupHandler } from '@metamask/snaps-types';\n\nconst UNSTOPPABLE_API_KEY = 'xxx';\n\nexport const onNameLookup: OnNameLookupHandler = async (request) => {\n  const { chainId, domain } = request;\n\n  if (domain && chainId === 'eip155:1') {\n    const response = await fetch(`https://api.unstoppabledomains.com/resolve/domains/${domain}`, {\n      headers: {\n        accept: \"application/json\",\n        authorization: `Bearer ${UNSTOPPABLE_API_KEY}`\n      },\n    });\n    const data = await response.json();\n    const resolvedAddress = data.records['crypto.ETH.address'];\n    if (address) {\n      return {\n        resolvedAddresses: [{ resolvedAddress, protocol: 'Unstoppable Domains' }],\n      };\n    }\n  }\n\n  return null;\n};\n")))}u.isMDXComponent=!0}}]);